
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Unit
 * 
 */
export type Unit = $Result.DefaultSelection<Prisma.$UnitPayload>
/**
 * Model Buyer
 * 
 */
export type Buyer = $Result.DefaultSelection<Prisma.$BuyerPayload>
/**
 * Model BuyerContract
 * 
 */
export type BuyerContract = $Result.DefaultSelection<Prisma.$BuyerContractPayload>
/**
 * Model BuyerPayment
 * 
 */
export type BuyerPayment = $Result.DefaultSelection<Prisma.$BuyerPaymentPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UnitStatus: {
  available: 'available',
  sold: 'sold',
  on_hold: 'on_hold'
};

export type UnitStatus = (typeof UnitStatus)[keyof typeof UnitStatus]


export const ContractStatus: {
  active: 'active',
  cancelled: 'cancelled',
  completed: 'completed'
};

export type ContractStatus = (typeof ContractStatus)[keyof typeof ContractStatus]


export const PaymentMethod: {
  bank_transfer: 'bank_transfer',
  cheque: 'cheque',
  cash: 'cash',
  other: 'other'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]

}

export type UnitStatus = $Enums.UnitStatus

export const UnitStatus: typeof $Enums.UnitStatus

export type ContractStatus = $Enums.ContractStatus

export const ContractStatus: typeof $Enums.ContractStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Projects
 * const projects = await prisma.project.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Projects
   * const projects = await prisma.project.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.unit`: Exposes CRUD operations for the **Unit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Units
    * const units = await prisma.unit.findMany()
    * ```
    */
  get unit(): Prisma.UnitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.buyer`: Exposes CRUD operations for the **Buyer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Buyers
    * const buyers = await prisma.buyer.findMany()
    * ```
    */
  get buyer(): Prisma.BuyerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.buyerContract`: Exposes CRUD operations for the **BuyerContract** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BuyerContracts
    * const buyerContracts = await prisma.buyerContract.findMany()
    * ```
    */
  get buyerContract(): Prisma.BuyerContractDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.buyerPayment`: Exposes CRUD operations for the **BuyerPayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BuyerPayments
    * const buyerPayments = await prisma.buyerPayment.findMany()
    * ```
    */
  get buyerPayment(): Prisma.BuyerPaymentDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.1
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Project: 'Project',
    Unit: 'Unit',
    Buyer: 'Buyer',
    BuyerContract: 'BuyerContract',
    BuyerPayment: 'BuyerPayment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "project" | "unit" | "buyer" | "buyerContract" | "buyerPayment"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Unit: {
        payload: Prisma.$UnitPayload<ExtArgs>
        fields: Prisma.UnitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UnitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UnitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          findFirst: {
            args: Prisma.UnitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UnitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          findMany: {
            args: Prisma.UnitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>[]
          }
          create: {
            args: Prisma.UnitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          createMany: {
            args: Prisma.UnitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UnitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          update: {
            args: Prisma.UnitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          deleteMany: {
            args: Prisma.UnitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UnitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UnitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          aggregate: {
            args: Prisma.UnitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUnit>
          }
          groupBy: {
            args: Prisma.UnitGroupByArgs<ExtArgs>
            result: $Utils.Optional<UnitGroupByOutputType>[]
          }
          count: {
            args: Prisma.UnitCountArgs<ExtArgs>
            result: $Utils.Optional<UnitCountAggregateOutputType> | number
          }
        }
      }
      Buyer: {
        payload: Prisma.$BuyerPayload<ExtArgs>
        fields: Prisma.BuyerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuyerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuyerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          findFirst: {
            args: Prisma.BuyerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuyerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          findMany: {
            args: Prisma.BuyerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>[]
          }
          create: {
            args: Prisma.BuyerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          createMany: {
            args: Prisma.BuyerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BuyerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          update: {
            args: Prisma.BuyerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          deleteMany: {
            args: Prisma.BuyerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuyerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BuyerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          aggregate: {
            args: Prisma.BuyerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuyer>
          }
          groupBy: {
            args: Prisma.BuyerGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuyerGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuyerCountArgs<ExtArgs>
            result: $Utils.Optional<BuyerCountAggregateOutputType> | number
          }
        }
      }
      BuyerContract: {
        payload: Prisma.$BuyerContractPayload<ExtArgs>
        fields: Prisma.BuyerContractFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuyerContractFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerContractPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuyerContractFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerContractPayload>
          }
          findFirst: {
            args: Prisma.BuyerContractFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerContractPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuyerContractFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerContractPayload>
          }
          findMany: {
            args: Prisma.BuyerContractFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerContractPayload>[]
          }
          create: {
            args: Prisma.BuyerContractCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerContractPayload>
          }
          createMany: {
            args: Prisma.BuyerContractCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BuyerContractDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerContractPayload>
          }
          update: {
            args: Prisma.BuyerContractUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerContractPayload>
          }
          deleteMany: {
            args: Prisma.BuyerContractDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuyerContractUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BuyerContractUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerContractPayload>
          }
          aggregate: {
            args: Prisma.BuyerContractAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuyerContract>
          }
          groupBy: {
            args: Prisma.BuyerContractGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuyerContractGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuyerContractCountArgs<ExtArgs>
            result: $Utils.Optional<BuyerContractCountAggregateOutputType> | number
          }
        }
      }
      BuyerPayment: {
        payload: Prisma.$BuyerPaymentPayload<ExtArgs>
        fields: Prisma.BuyerPaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuyerPaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuyerPaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPaymentPayload>
          }
          findFirst: {
            args: Prisma.BuyerPaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuyerPaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPaymentPayload>
          }
          findMany: {
            args: Prisma.BuyerPaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPaymentPayload>[]
          }
          create: {
            args: Prisma.BuyerPaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPaymentPayload>
          }
          createMany: {
            args: Prisma.BuyerPaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BuyerPaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPaymentPayload>
          }
          update: {
            args: Prisma.BuyerPaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPaymentPayload>
          }
          deleteMany: {
            args: Prisma.BuyerPaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuyerPaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BuyerPaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPaymentPayload>
          }
          aggregate: {
            args: Prisma.BuyerPaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuyerPayment>
          }
          groupBy: {
            args: Prisma.BuyerPaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuyerPaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuyerPaymentCountArgs<ExtArgs>
            result: $Utils.Optional<BuyerPaymentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    project?: ProjectOmit
    unit?: UnitOmit
    buyer?: BuyerOmit
    buyerContract?: BuyerContractOmit
    buyerPayment?: BuyerPaymentOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    units: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    units?: boolean | ProjectCountOutputTypeCountUnitsArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountUnitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnitWhereInput
  }


  /**
   * Count Type UnitCountOutputType
   */

  export type UnitCountOutputType = {
    contracts: number
  }

  export type UnitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | UnitCountOutputTypeCountContractsArgs
  }

  // Custom InputTypes
  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitCountOutputType
     */
    select?: UnitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyerContractWhereInput
  }


  /**
   * Count Type BuyerCountOutputType
   */

  export type BuyerCountOutputType = {
    contracts: number
  }

  export type BuyerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | BuyerCountOutputTypeCountContractsArgs
  }

  // Custom InputTypes
  /**
   * BuyerCountOutputType without action
   */
  export type BuyerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerCountOutputType
     */
    select?: BuyerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BuyerCountOutputType without action
   */
  export type BuyerCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyerContractWhereInput
  }


  /**
   * Count Type BuyerContractCountOutputType
   */

  export type BuyerContractCountOutputType = {
    payments: number
  }

  export type BuyerContractCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | BuyerContractCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * BuyerContractCountOutputType without action
   */
  export type BuyerContractCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerContractCountOutputType
     */
    select?: BuyerContractCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BuyerContractCountOutputType without action
   */
  export type BuyerContractCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyerPaymentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    id: number | null
  }

  export type ProjectSumAggregateOutputType = {
    id: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    startDate: Date | null
    endDatePlanned: Date | null
    endDateActual: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    startDate: Date | null
    endDatePlanned: Date | null
    endDateActual: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    address: number
    startDate: number
    endDatePlanned: number
    endDateActual: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    id?: true
  }

  export type ProjectSumAggregateInputType = {
    id?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    startDate?: true
    endDatePlanned?: true
    endDateActual?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    startDate?: true
    endDatePlanned?: true
    endDateActual?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    startDate?: true
    endDatePlanned?: true
    endDateActual?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: number
    name: string
    address: string | null
    startDate: Date | null
    endDatePlanned: Date | null
    endDateActual: Date | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    startDate?: boolean
    endDatePlanned?: boolean
    endDateActual?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    units?: boolean | Project$unitsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>



  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    startDate?: boolean
    endDatePlanned?: boolean
    endDateActual?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "address" | "startDate" | "endDatePlanned" | "endDateActual" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["project"]>
  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    units?: boolean | Project$unitsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      units: Prisma.$UnitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      address: string | null
      startDate: Date | null
      endDatePlanned: Date | null
      endDateActual: Date | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    units<T extends Project$unitsArgs<ExtArgs> = {}>(args?: Subset<T, Project$unitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'Int'>
    readonly name: FieldRef<"Project", 'String'>
    readonly address: FieldRef<"Project", 'String'>
    readonly startDate: FieldRef<"Project", 'DateTime'>
    readonly endDatePlanned: FieldRef<"Project", 'DateTime'>
    readonly endDateActual: FieldRef<"Project", 'DateTime'>
    readonly notes: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Project.units
   */
  export type Project$unitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    where?: UnitWhereInput
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    cursor?: UnitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Unit
   */

  export type AggregateUnit = {
    _count: UnitCountAggregateOutputType | null
    _avg: UnitAvgAggregateOutputType | null
    _sum: UnitSumAggregateOutputType | null
    _min: UnitMinAggregateOutputType | null
    _max: UnitMaxAggregateOutputType | null
  }

  export type UnitAvgAggregateOutputType = {
    id: number | null
    projectId: number | null
    floor: number | null
    rooms: Decimal | null
    areaSqm: Decimal | null
    priceList: Decimal | null
  }

  export type UnitSumAggregateOutputType = {
    id: number | null
    projectId: number | null
    floor: number | null
    rooms: Decimal | null
    areaSqm: Decimal | null
    priceList: Decimal | null
  }

  export type UnitMinAggregateOutputType = {
    id: number | null
    projectId: number | null
    unitCode: string | null
    floor: number | null
    rooms: Decimal | null
    areaSqm: Decimal | null
    priceList: Decimal | null
    status: $Enums.UnitStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UnitMaxAggregateOutputType = {
    id: number | null
    projectId: number | null
    unitCode: string | null
    floor: number | null
    rooms: Decimal | null
    areaSqm: Decimal | null
    priceList: Decimal | null
    status: $Enums.UnitStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UnitCountAggregateOutputType = {
    id: number
    projectId: number
    unitCode: number
    floor: number
    rooms: number
    areaSqm: number
    priceList: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UnitAvgAggregateInputType = {
    id?: true
    projectId?: true
    floor?: true
    rooms?: true
    areaSqm?: true
    priceList?: true
  }

  export type UnitSumAggregateInputType = {
    id?: true
    projectId?: true
    floor?: true
    rooms?: true
    areaSqm?: true
    priceList?: true
  }

  export type UnitMinAggregateInputType = {
    id?: true
    projectId?: true
    unitCode?: true
    floor?: true
    rooms?: true
    areaSqm?: true
    priceList?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UnitMaxAggregateInputType = {
    id?: true
    projectId?: true
    unitCode?: true
    floor?: true
    rooms?: true
    areaSqm?: true
    priceList?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UnitCountAggregateInputType = {
    id?: true
    projectId?: true
    unitCode?: true
    floor?: true
    rooms?: true
    areaSqm?: true
    priceList?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UnitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Unit to aggregate.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Units
    **/
    _count?: true | UnitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UnitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UnitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UnitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UnitMaxAggregateInputType
  }

  export type GetUnitAggregateType<T extends UnitAggregateArgs> = {
        [P in keyof T & keyof AggregateUnit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUnit[P]>
      : GetScalarType<T[P], AggregateUnit[P]>
  }




  export type UnitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnitWhereInput
    orderBy?: UnitOrderByWithAggregationInput | UnitOrderByWithAggregationInput[]
    by: UnitScalarFieldEnum[] | UnitScalarFieldEnum
    having?: UnitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UnitCountAggregateInputType | true
    _avg?: UnitAvgAggregateInputType
    _sum?: UnitSumAggregateInputType
    _min?: UnitMinAggregateInputType
    _max?: UnitMaxAggregateInputType
  }

  export type UnitGroupByOutputType = {
    id: number
    projectId: number
    unitCode: string
    floor: number | null
    rooms: Decimal | null
    areaSqm: Decimal | null
    priceList: Decimal | null
    status: $Enums.UnitStatus
    createdAt: Date
    updatedAt: Date
    _count: UnitCountAggregateOutputType | null
    _avg: UnitAvgAggregateOutputType | null
    _sum: UnitSumAggregateOutputType | null
    _min: UnitMinAggregateOutputType | null
    _max: UnitMaxAggregateOutputType | null
  }

  type GetUnitGroupByPayload<T extends UnitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UnitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UnitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UnitGroupByOutputType[P]>
            : GetScalarType<T[P], UnitGroupByOutputType[P]>
        }
      >
    >


  export type UnitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    unitCode?: boolean
    floor?: boolean
    rooms?: boolean
    areaSqm?: boolean
    priceList?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    contracts?: boolean | Unit$contractsArgs<ExtArgs>
    _count?: boolean | UnitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["unit"]>



  export type UnitSelectScalar = {
    id?: boolean
    projectId?: boolean
    unitCode?: boolean
    floor?: boolean
    rooms?: boolean
    areaSqm?: boolean
    priceList?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UnitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectId" | "unitCode" | "floor" | "rooms" | "areaSqm" | "priceList" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["unit"]>
  export type UnitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    contracts?: boolean | Unit$contractsArgs<ExtArgs>
    _count?: boolean | UnitCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UnitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Unit"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      contracts: Prisma.$BuyerContractPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      projectId: number
      unitCode: string
      floor: number | null
      rooms: Prisma.Decimal | null
      areaSqm: Prisma.Decimal | null
      priceList: Prisma.Decimal | null
      status: $Enums.UnitStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["unit"]>
    composites: {}
  }

  type UnitGetPayload<S extends boolean | null | undefined | UnitDefaultArgs> = $Result.GetResult<Prisma.$UnitPayload, S>

  type UnitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UnitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UnitCountAggregateInputType | true
    }

  export interface UnitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Unit'], meta: { name: 'Unit' } }
    /**
     * Find zero or one Unit that matches the filter.
     * @param {UnitFindUniqueArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UnitFindUniqueArgs>(args: SelectSubset<T, UnitFindUniqueArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Unit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UnitFindUniqueOrThrowArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UnitFindUniqueOrThrowArgs>(args: SelectSubset<T, UnitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Unit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindFirstArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UnitFindFirstArgs>(args?: SelectSubset<T, UnitFindFirstArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Unit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindFirstOrThrowArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UnitFindFirstOrThrowArgs>(args?: SelectSubset<T, UnitFindFirstOrThrowArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Units that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Units
     * const units = await prisma.unit.findMany()
     * 
     * // Get first 10 Units
     * const units = await prisma.unit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const unitWithIdOnly = await prisma.unit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UnitFindManyArgs>(args?: SelectSubset<T, UnitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Unit.
     * @param {UnitCreateArgs} args - Arguments to create a Unit.
     * @example
     * // Create one Unit
     * const Unit = await prisma.unit.create({
     *   data: {
     *     // ... data to create a Unit
     *   }
     * })
     * 
     */
    create<T extends UnitCreateArgs>(args: SelectSubset<T, UnitCreateArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Units.
     * @param {UnitCreateManyArgs} args - Arguments to create many Units.
     * @example
     * // Create many Units
     * const unit = await prisma.unit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UnitCreateManyArgs>(args?: SelectSubset<T, UnitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Unit.
     * @param {UnitDeleteArgs} args - Arguments to delete one Unit.
     * @example
     * // Delete one Unit
     * const Unit = await prisma.unit.delete({
     *   where: {
     *     // ... filter to delete one Unit
     *   }
     * })
     * 
     */
    delete<T extends UnitDeleteArgs>(args: SelectSubset<T, UnitDeleteArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Unit.
     * @param {UnitUpdateArgs} args - Arguments to update one Unit.
     * @example
     * // Update one Unit
     * const unit = await prisma.unit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UnitUpdateArgs>(args: SelectSubset<T, UnitUpdateArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Units.
     * @param {UnitDeleteManyArgs} args - Arguments to filter Units to delete.
     * @example
     * // Delete a few Units
     * const { count } = await prisma.unit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UnitDeleteManyArgs>(args?: SelectSubset<T, UnitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Units.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Units
     * const unit = await prisma.unit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UnitUpdateManyArgs>(args: SelectSubset<T, UnitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Unit.
     * @param {UnitUpsertArgs} args - Arguments to update or create a Unit.
     * @example
     * // Update or create a Unit
     * const unit = await prisma.unit.upsert({
     *   create: {
     *     // ... data to create a Unit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Unit we want to update
     *   }
     * })
     */
    upsert<T extends UnitUpsertArgs>(args: SelectSubset<T, UnitUpsertArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Units.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitCountArgs} args - Arguments to filter Units to count.
     * @example
     * // Count the number of Units
     * const count = await prisma.unit.count({
     *   where: {
     *     // ... the filter for the Units we want to count
     *   }
     * })
    **/
    count<T extends UnitCountArgs>(
      args?: Subset<T, UnitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UnitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Unit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UnitAggregateArgs>(args: Subset<T, UnitAggregateArgs>): Prisma.PrismaPromise<GetUnitAggregateType<T>>

    /**
     * Group by Unit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UnitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UnitGroupByArgs['orderBy'] }
        : { orderBy?: UnitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UnitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUnitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Unit model
   */
  readonly fields: UnitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Unit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UnitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contracts<T extends Unit$contractsArgs<ExtArgs> = {}>(args?: Subset<T, Unit$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Unit model
   */
  interface UnitFieldRefs {
    readonly id: FieldRef<"Unit", 'Int'>
    readonly projectId: FieldRef<"Unit", 'Int'>
    readonly unitCode: FieldRef<"Unit", 'String'>
    readonly floor: FieldRef<"Unit", 'Int'>
    readonly rooms: FieldRef<"Unit", 'Decimal'>
    readonly areaSqm: FieldRef<"Unit", 'Decimal'>
    readonly priceList: FieldRef<"Unit", 'Decimal'>
    readonly status: FieldRef<"Unit", 'UnitStatus'>
    readonly createdAt: FieldRef<"Unit", 'DateTime'>
    readonly updatedAt: FieldRef<"Unit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Unit findUnique
   */
  export type UnitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit findUniqueOrThrow
   */
  export type UnitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit findFirst
   */
  export type UnitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Units.
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Units.
     */
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Unit findFirstOrThrow
   */
  export type UnitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Units.
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Units.
     */
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Unit findMany
   */
  export type UnitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Units to fetch.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Units.
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Unit create
   */
  export type UnitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * The data needed to create a Unit.
     */
    data: XOR<UnitCreateInput, UnitUncheckedCreateInput>
  }

  /**
   * Unit createMany
   */
  export type UnitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Units.
     */
    data: UnitCreateManyInput | UnitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Unit update
   */
  export type UnitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * The data needed to update a Unit.
     */
    data: XOR<UnitUpdateInput, UnitUncheckedUpdateInput>
    /**
     * Choose, which Unit to update.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit updateMany
   */
  export type UnitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Units.
     */
    data: XOR<UnitUpdateManyMutationInput, UnitUncheckedUpdateManyInput>
    /**
     * Filter which Units to update
     */
    where?: UnitWhereInput
    /**
     * Limit how many Units to update.
     */
    limit?: number
  }

  /**
   * Unit upsert
   */
  export type UnitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * The filter to search for the Unit to update in case it exists.
     */
    where: UnitWhereUniqueInput
    /**
     * In case the Unit found by the `where` argument doesn't exist, create a new Unit with this data.
     */
    create: XOR<UnitCreateInput, UnitUncheckedCreateInput>
    /**
     * In case the Unit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UnitUpdateInput, UnitUncheckedUpdateInput>
  }

  /**
   * Unit delete
   */
  export type UnitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter which Unit to delete.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit deleteMany
   */
  export type UnitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Units to delete
     */
    where?: UnitWhereInput
    /**
     * Limit how many Units to delete.
     */
    limit?: number
  }

  /**
   * Unit.contracts
   */
  export type Unit$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerContract
     */
    select?: BuyerContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerContract
     */
    omit?: BuyerContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerContractInclude<ExtArgs> | null
    where?: BuyerContractWhereInput
    orderBy?: BuyerContractOrderByWithRelationInput | BuyerContractOrderByWithRelationInput[]
    cursor?: BuyerContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuyerContractScalarFieldEnum | BuyerContractScalarFieldEnum[]
  }

  /**
   * Unit without action
   */
  export type UnitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
  }


  /**
   * Model Buyer
   */

  export type AggregateBuyer = {
    _count: BuyerCountAggregateOutputType | null
    _avg: BuyerAvgAggregateOutputType | null
    _sum: BuyerSumAggregateOutputType | null
    _min: BuyerMinAggregateOutputType | null
    _max: BuyerMaxAggregateOutputType | null
  }

  export type BuyerAvgAggregateOutputType = {
    id: number | null
  }

  export type BuyerSumAggregateOutputType = {
    id: number | null
  }

  export type BuyerMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    idNumber: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BuyerMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    idNumber: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BuyerCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    idNumber: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BuyerAvgAggregateInputType = {
    id?: true
  }

  export type BuyerSumAggregateInputType = {
    id?: true
  }

  export type BuyerMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    idNumber?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BuyerMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    idNumber?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BuyerCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    idNumber?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BuyerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buyer to aggregate.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Buyers
    **/
    _count?: true | BuyerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BuyerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BuyerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuyerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuyerMaxAggregateInputType
  }

  export type GetBuyerAggregateType<T extends BuyerAggregateArgs> = {
        [P in keyof T & keyof AggregateBuyer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuyer[P]>
      : GetScalarType<T[P], AggregateBuyer[P]>
  }




  export type BuyerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyerWhereInput
    orderBy?: BuyerOrderByWithAggregationInput | BuyerOrderByWithAggregationInput[]
    by: BuyerScalarFieldEnum[] | BuyerScalarFieldEnum
    having?: BuyerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuyerCountAggregateInputType | true
    _avg?: BuyerAvgAggregateInputType
    _sum?: BuyerSumAggregateInputType
    _min?: BuyerMinAggregateInputType
    _max?: BuyerMaxAggregateInputType
  }

  export type BuyerGroupByOutputType = {
    id: number
    name: string
    email: string | null
    phone: string | null
    idNumber: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: BuyerCountAggregateOutputType | null
    _avg: BuyerAvgAggregateOutputType | null
    _sum: BuyerSumAggregateOutputType | null
    _min: BuyerMinAggregateOutputType | null
    _max: BuyerMaxAggregateOutputType | null
  }

  type GetBuyerGroupByPayload<T extends BuyerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuyerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuyerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuyerGroupByOutputType[P]>
            : GetScalarType<T[P], BuyerGroupByOutputType[P]>
        }
      >
    >


  export type BuyerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    idNumber?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contracts?: boolean | Buyer$contractsArgs<ExtArgs>
    _count?: boolean | BuyerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buyer"]>



  export type BuyerSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    idNumber?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BuyerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "idNumber" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["buyer"]>
  export type BuyerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | Buyer$contractsArgs<ExtArgs>
    _count?: boolean | BuyerCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BuyerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Buyer"
    objects: {
      contracts: Prisma.$BuyerContractPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string | null
      phone: string | null
      idNumber: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["buyer"]>
    composites: {}
  }

  type BuyerGetPayload<S extends boolean | null | undefined | BuyerDefaultArgs> = $Result.GetResult<Prisma.$BuyerPayload, S>

  type BuyerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BuyerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BuyerCountAggregateInputType | true
    }

  export interface BuyerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Buyer'], meta: { name: 'Buyer' } }
    /**
     * Find zero or one Buyer that matches the filter.
     * @param {BuyerFindUniqueArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuyerFindUniqueArgs>(args: SelectSubset<T, BuyerFindUniqueArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Buyer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BuyerFindUniqueOrThrowArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuyerFindUniqueOrThrowArgs>(args: SelectSubset<T, BuyerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Buyer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerFindFirstArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuyerFindFirstArgs>(args?: SelectSubset<T, BuyerFindFirstArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Buyer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerFindFirstOrThrowArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuyerFindFirstOrThrowArgs>(args?: SelectSubset<T, BuyerFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Buyers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Buyers
     * const buyers = await prisma.buyer.findMany()
     * 
     * // Get first 10 Buyers
     * const buyers = await prisma.buyer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buyerWithIdOnly = await prisma.buyer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BuyerFindManyArgs>(args?: SelectSubset<T, BuyerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Buyer.
     * @param {BuyerCreateArgs} args - Arguments to create a Buyer.
     * @example
     * // Create one Buyer
     * const Buyer = await prisma.buyer.create({
     *   data: {
     *     // ... data to create a Buyer
     *   }
     * })
     * 
     */
    create<T extends BuyerCreateArgs>(args: SelectSubset<T, BuyerCreateArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Buyers.
     * @param {BuyerCreateManyArgs} args - Arguments to create many Buyers.
     * @example
     * // Create many Buyers
     * const buyer = await prisma.buyer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuyerCreateManyArgs>(args?: SelectSubset<T, BuyerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Buyer.
     * @param {BuyerDeleteArgs} args - Arguments to delete one Buyer.
     * @example
     * // Delete one Buyer
     * const Buyer = await prisma.buyer.delete({
     *   where: {
     *     // ... filter to delete one Buyer
     *   }
     * })
     * 
     */
    delete<T extends BuyerDeleteArgs>(args: SelectSubset<T, BuyerDeleteArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Buyer.
     * @param {BuyerUpdateArgs} args - Arguments to update one Buyer.
     * @example
     * // Update one Buyer
     * const buyer = await prisma.buyer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuyerUpdateArgs>(args: SelectSubset<T, BuyerUpdateArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Buyers.
     * @param {BuyerDeleteManyArgs} args - Arguments to filter Buyers to delete.
     * @example
     * // Delete a few Buyers
     * const { count } = await prisma.buyer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuyerDeleteManyArgs>(args?: SelectSubset<T, BuyerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Buyers
     * const buyer = await prisma.buyer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuyerUpdateManyArgs>(args: SelectSubset<T, BuyerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Buyer.
     * @param {BuyerUpsertArgs} args - Arguments to update or create a Buyer.
     * @example
     * // Update or create a Buyer
     * const buyer = await prisma.buyer.upsert({
     *   create: {
     *     // ... data to create a Buyer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Buyer we want to update
     *   }
     * })
     */
    upsert<T extends BuyerUpsertArgs>(args: SelectSubset<T, BuyerUpsertArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Buyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerCountArgs} args - Arguments to filter Buyers to count.
     * @example
     * // Count the number of Buyers
     * const count = await prisma.buyer.count({
     *   where: {
     *     // ... the filter for the Buyers we want to count
     *   }
     * })
    **/
    count<T extends BuyerCountArgs>(
      args?: Subset<T, BuyerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuyerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Buyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuyerAggregateArgs>(args: Subset<T, BuyerAggregateArgs>): Prisma.PrismaPromise<GetBuyerAggregateType<T>>

    /**
     * Group by Buyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuyerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuyerGroupByArgs['orderBy'] }
        : { orderBy?: BuyerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuyerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuyerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Buyer model
   */
  readonly fields: BuyerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Buyer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuyerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contracts<T extends Buyer$contractsArgs<ExtArgs> = {}>(args?: Subset<T, Buyer$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Buyer model
   */
  interface BuyerFieldRefs {
    readonly id: FieldRef<"Buyer", 'Int'>
    readonly name: FieldRef<"Buyer", 'String'>
    readonly email: FieldRef<"Buyer", 'String'>
    readonly phone: FieldRef<"Buyer", 'String'>
    readonly idNumber: FieldRef<"Buyer", 'String'>
    readonly notes: FieldRef<"Buyer", 'String'>
    readonly createdAt: FieldRef<"Buyer", 'DateTime'>
    readonly updatedAt: FieldRef<"Buyer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Buyer findUnique
   */
  export type BuyerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where: BuyerWhereUniqueInput
  }

  /**
   * Buyer findUniqueOrThrow
   */
  export type BuyerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where: BuyerWhereUniqueInput
  }

  /**
   * Buyer findFirst
   */
  export type BuyerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buyers.
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buyers.
     */
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }

  /**
   * Buyer findFirstOrThrow
   */
  export type BuyerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buyers.
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buyers.
     */
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }

  /**
   * Buyer findMany
   */
  export type BuyerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyers to fetch.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Buyers.
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }

  /**
   * Buyer create
   */
  export type BuyerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * The data needed to create a Buyer.
     */
    data: XOR<BuyerCreateInput, BuyerUncheckedCreateInput>
  }

  /**
   * Buyer createMany
   */
  export type BuyerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Buyers.
     */
    data: BuyerCreateManyInput | BuyerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Buyer update
   */
  export type BuyerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * The data needed to update a Buyer.
     */
    data: XOR<BuyerUpdateInput, BuyerUncheckedUpdateInput>
    /**
     * Choose, which Buyer to update.
     */
    where: BuyerWhereUniqueInput
  }

  /**
   * Buyer updateMany
   */
  export type BuyerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Buyers.
     */
    data: XOR<BuyerUpdateManyMutationInput, BuyerUncheckedUpdateManyInput>
    /**
     * Filter which Buyers to update
     */
    where?: BuyerWhereInput
    /**
     * Limit how many Buyers to update.
     */
    limit?: number
  }

  /**
   * Buyer upsert
   */
  export type BuyerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * The filter to search for the Buyer to update in case it exists.
     */
    where: BuyerWhereUniqueInput
    /**
     * In case the Buyer found by the `where` argument doesn't exist, create a new Buyer with this data.
     */
    create: XOR<BuyerCreateInput, BuyerUncheckedCreateInput>
    /**
     * In case the Buyer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuyerUpdateInput, BuyerUncheckedUpdateInput>
  }

  /**
   * Buyer delete
   */
  export type BuyerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter which Buyer to delete.
     */
    where: BuyerWhereUniqueInput
  }

  /**
   * Buyer deleteMany
   */
  export type BuyerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buyers to delete
     */
    where?: BuyerWhereInput
    /**
     * Limit how many Buyers to delete.
     */
    limit?: number
  }

  /**
   * Buyer.contracts
   */
  export type Buyer$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerContract
     */
    select?: BuyerContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerContract
     */
    omit?: BuyerContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerContractInclude<ExtArgs> | null
    where?: BuyerContractWhereInput
    orderBy?: BuyerContractOrderByWithRelationInput | BuyerContractOrderByWithRelationInput[]
    cursor?: BuyerContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuyerContractScalarFieldEnum | BuyerContractScalarFieldEnum[]
  }

  /**
   * Buyer without action
   */
  export type BuyerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
  }


  /**
   * Model BuyerContract
   */

  export type AggregateBuyerContract = {
    _count: BuyerContractCountAggregateOutputType | null
    _avg: BuyerContractAvgAggregateOutputType | null
    _sum: BuyerContractSumAggregateOutputType | null
    _min: BuyerContractMinAggregateOutputType | null
    _max: BuyerContractMaxAggregateOutputType | null
  }

  export type BuyerContractAvgAggregateOutputType = {
    id: number | null
    buyerId: number | null
    unitId: number | null
    basePrice: Decimal | null
  }

  export type BuyerContractSumAggregateOutputType = {
    id: number | null
    buyerId: number | null
    unitId: number | null
    basePrice: Decimal | null
  }

  export type BuyerContractMinAggregateOutputType = {
    id: number | null
    buyerId: number | null
    unitId: number | null
    contractDate: Date | null
    basePrice: Decimal | null
    cpiBaseMonth: Date | null
    paymentTerms: string | null
    status: $Enums.ContractStatus | null
    versionLabel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BuyerContractMaxAggregateOutputType = {
    id: number | null
    buyerId: number | null
    unitId: number | null
    contractDate: Date | null
    basePrice: Decimal | null
    cpiBaseMonth: Date | null
    paymentTerms: string | null
    status: $Enums.ContractStatus | null
    versionLabel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BuyerContractCountAggregateOutputType = {
    id: number
    buyerId: number
    unitId: number
    contractDate: number
    basePrice: number
    cpiBaseMonth: number
    paymentTerms: number
    status: number
    versionLabel: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BuyerContractAvgAggregateInputType = {
    id?: true
    buyerId?: true
    unitId?: true
    basePrice?: true
  }

  export type BuyerContractSumAggregateInputType = {
    id?: true
    buyerId?: true
    unitId?: true
    basePrice?: true
  }

  export type BuyerContractMinAggregateInputType = {
    id?: true
    buyerId?: true
    unitId?: true
    contractDate?: true
    basePrice?: true
    cpiBaseMonth?: true
    paymentTerms?: true
    status?: true
    versionLabel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BuyerContractMaxAggregateInputType = {
    id?: true
    buyerId?: true
    unitId?: true
    contractDate?: true
    basePrice?: true
    cpiBaseMonth?: true
    paymentTerms?: true
    status?: true
    versionLabel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BuyerContractCountAggregateInputType = {
    id?: true
    buyerId?: true
    unitId?: true
    contractDate?: true
    basePrice?: true
    cpiBaseMonth?: true
    paymentTerms?: true
    status?: true
    versionLabel?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BuyerContractAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuyerContract to aggregate.
     */
    where?: BuyerContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyerContracts to fetch.
     */
    orderBy?: BuyerContractOrderByWithRelationInput | BuyerContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuyerContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyerContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyerContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BuyerContracts
    **/
    _count?: true | BuyerContractCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BuyerContractAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BuyerContractSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuyerContractMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuyerContractMaxAggregateInputType
  }

  export type GetBuyerContractAggregateType<T extends BuyerContractAggregateArgs> = {
        [P in keyof T & keyof AggregateBuyerContract]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuyerContract[P]>
      : GetScalarType<T[P], AggregateBuyerContract[P]>
  }




  export type BuyerContractGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyerContractWhereInput
    orderBy?: BuyerContractOrderByWithAggregationInput | BuyerContractOrderByWithAggregationInput[]
    by: BuyerContractScalarFieldEnum[] | BuyerContractScalarFieldEnum
    having?: BuyerContractScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuyerContractCountAggregateInputType | true
    _avg?: BuyerContractAvgAggregateInputType
    _sum?: BuyerContractSumAggregateInputType
    _min?: BuyerContractMinAggregateInputType
    _max?: BuyerContractMaxAggregateInputType
  }

  export type BuyerContractGroupByOutputType = {
    id: number
    buyerId: number
    unitId: number
    contractDate: Date
    basePrice: Decimal
    cpiBaseMonth: Date
    paymentTerms: string | null
    status: $Enums.ContractStatus
    versionLabel: string | null
    createdAt: Date
    updatedAt: Date
    _count: BuyerContractCountAggregateOutputType | null
    _avg: BuyerContractAvgAggregateOutputType | null
    _sum: BuyerContractSumAggregateOutputType | null
    _min: BuyerContractMinAggregateOutputType | null
    _max: BuyerContractMaxAggregateOutputType | null
  }

  type GetBuyerContractGroupByPayload<T extends BuyerContractGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuyerContractGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuyerContractGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuyerContractGroupByOutputType[P]>
            : GetScalarType<T[P], BuyerContractGroupByOutputType[P]>
        }
      >
    >


  export type BuyerContractSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buyerId?: boolean
    unitId?: boolean
    contractDate?: boolean
    basePrice?: boolean
    cpiBaseMonth?: boolean
    paymentTerms?: boolean
    status?: boolean
    versionLabel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
    payments?: boolean | BuyerContract$paymentsArgs<ExtArgs>
    _count?: boolean | BuyerContractCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buyerContract"]>



  export type BuyerContractSelectScalar = {
    id?: boolean
    buyerId?: boolean
    unitId?: boolean
    contractDate?: boolean
    basePrice?: boolean
    cpiBaseMonth?: boolean
    paymentTerms?: boolean
    status?: boolean
    versionLabel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BuyerContractOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "buyerId" | "unitId" | "contractDate" | "basePrice" | "cpiBaseMonth" | "paymentTerms" | "status" | "versionLabel" | "createdAt" | "updatedAt", ExtArgs["result"]["buyerContract"]>
  export type BuyerContractInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
    payments?: boolean | BuyerContract$paymentsArgs<ExtArgs>
    _count?: boolean | BuyerContractCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BuyerContractPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BuyerContract"
    objects: {
      buyer: Prisma.$BuyerPayload<ExtArgs>
      unit: Prisma.$UnitPayload<ExtArgs>
      payments: Prisma.$BuyerPaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      buyerId: number
      unitId: number
      contractDate: Date
      basePrice: Prisma.Decimal
      cpiBaseMonth: Date
      paymentTerms: string | null
      status: $Enums.ContractStatus
      versionLabel: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["buyerContract"]>
    composites: {}
  }

  type BuyerContractGetPayload<S extends boolean | null | undefined | BuyerContractDefaultArgs> = $Result.GetResult<Prisma.$BuyerContractPayload, S>

  type BuyerContractCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BuyerContractFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BuyerContractCountAggregateInputType | true
    }

  export interface BuyerContractDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BuyerContract'], meta: { name: 'BuyerContract' } }
    /**
     * Find zero or one BuyerContract that matches the filter.
     * @param {BuyerContractFindUniqueArgs} args - Arguments to find a BuyerContract
     * @example
     * // Get one BuyerContract
     * const buyerContract = await prisma.buyerContract.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuyerContractFindUniqueArgs>(args: SelectSubset<T, BuyerContractFindUniqueArgs<ExtArgs>>): Prisma__BuyerContractClient<$Result.GetResult<Prisma.$BuyerContractPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BuyerContract that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BuyerContractFindUniqueOrThrowArgs} args - Arguments to find a BuyerContract
     * @example
     * // Get one BuyerContract
     * const buyerContract = await prisma.buyerContract.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuyerContractFindUniqueOrThrowArgs>(args: SelectSubset<T, BuyerContractFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuyerContractClient<$Result.GetResult<Prisma.$BuyerContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BuyerContract that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerContractFindFirstArgs} args - Arguments to find a BuyerContract
     * @example
     * // Get one BuyerContract
     * const buyerContract = await prisma.buyerContract.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuyerContractFindFirstArgs>(args?: SelectSubset<T, BuyerContractFindFirstArgs<ExtArgs>>): Prisma__BuyerContractClient<$Result.GetResult<Prisma.$BuyerContractPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BuyerContract that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerContractFindFirstOrThrowArgs} args - Arguments to find a BuyerContract
     * @example
     * // Get one BuyerContract
     * const buyerContract = await prisma.buyerContract.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuyerContractFindFirstOrThrowArgs>(args?: SelectSubset<T, BuyerContractFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuyerContractClient<$Result.GetResult<Prisma.$BuyerContractPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BuyerContracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerContractFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BuyerContracts
     * const buyerContracts = await prisma.buyerContract.findMany()
     * 
     * // Get first 10 BuyerContracts
     * const buyerContracts = await prisma.buyerContract.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buyerContractWithIdOnly = await prisma.buyerContract.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BuyerContractFindManyArgs>(args?: SelectSubset<T, BuyerContractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BuyerContract.
     * @param {BuyerContractCreateArgs} args - Arguments to create a BuyerContract.
     * @example
     * // Create one BuyerContract
     * const BuyerContract = await prisma.buyerContract.create({
     *   data: {
     *     // ... data to create a BuyerContract
     *   }
     * })
     * 
     */
    create<T extends BuyerContractCreateArgs>(args: SelectSubset<T, BuyerContractCreateArgs<ExtArgs>>): Prisma__BuyerContractClient<$Result.GetResult<Prisma.$BuyerContractPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BuyerContracts.
     * @param {BuyerContractCreateManyArgs} args - Arguments to create many BuyerContracts.
     * @example
     * // Create many BuyerContracts
     * const buyerContract = await prisma.buyerContract.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuyerContractCreateManyArgs>(args?: SelectSubset<T, BuyerContractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BuyerContract.
     * @param {BuyerContractDeleteArgs} args - Arguments to delete one BuyerContract.
     * @example
     * // Delete one BuyerContract
     * const BuyerContract = await prisma.buyerContract.delete({
     *   where: {
     *     // ... filter to delete one BuyerContract
     *   }
     * })
     * 
     */
    delete<T extends BuyerContractDeleteArgs>(args: SelectSubset<T, BuyerContractDeleteArgs<ExtArgs>>): Prisma__BuyerContractClient<$Result.GetResult<Prisma.$BuyerContractPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BuyerContract.
     * @param {BuyerContractUpdateArgs} args - Arguments to update one BuyerContract.
     * @example
     * // Update one BuyerContract
     * const buyerContract = await prisma.buyerContract.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuyerContractUpdateArgs>(args: SelectSubset<T, BuyerContractUpdateArgs<ExtArgs>>): Prisma__BuyerContractClient<$Result.GetResult<Prisma.$BuyerContractPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BuyerContracts.
     * @param {BuyerContractDeleteManyArgs} args - Arguments to filter BuyerContracts to delete.
     * @example
     * // Delete a few BuyerContracts
     * const { count } = await prisma.buyerContract.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuyerContractDeleteManyArgs>(args?: SelectSubset<T, BuyerContractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BuyerContracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerContractUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BuyerContracts
     * const buyerContract = await prisma.buyerContract.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuyerContractUpdateManyArgs>(args: SelectSubset<T, BuyerContractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BuyerContract.
     * @param {BuyerContractUpsertArgs} args - Arguments to update or create a BuyerContract.
     * @example
     * // Update or create a BuyerContract
     * const buyerContract = await prisma.buyerContract.upsert({
     *   create: {
     *     // ... data to create a BuyerContract
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BuyerContract we want to update
     *   }
     * })
     */
    upsert<T extends BuyerContractUpsertArgs>(args: SelectSubset<T, BuyerContractUpsertArgs<ExtArgs>>): Prisma__BuyerContractClient<$Result.GetResult<Prisma.$BuyerContractPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BuyerContracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerContractCountArgs} args - Arguments to filter BuyerContracts to count.
     * @example
     * // Count the number of BuyerContracts
     * const count = await prisma.buyerContract.count({
     *   where: {
     *     // ... the filter for the BuyerContracts we want to count
     *   }
     * })
    **/
    count<T extends BuyerContractCountArgs>(
      args?: Subset<T, BuyerContractCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuyerContractCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BuyerContract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuyerContractAggregateArgs>(args: Subset<T, BuyerContractAggregateArgs>): Prisma.PrismaPromise<GetBuyerContractAggregateType<T>>

    /**
     * Group by BuyerContract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerContractGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuyerContractGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuyerContractGroupByArgs['orderBy'] }
        : { orderBy?: BuyerContractGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuyerContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuyerContractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BuyerContract model
   */
  readonly fields: BuyerContractFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BuyerContract.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuyerContractClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    buyer<T extends BuyerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BuyerDefaultArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    unit<T extends UnitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UnitDefaultArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payments<T extends BuyerContract$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, BuyerContract$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BuyerContract model
   */
  interface BuyerContractFieldRefs {
    readonly id: FieldRef<"BuyerContract", 'Int'>
    readonly buyerId: FieldRef<"BuyerContract", 'Int'>
    readonly unitId: FieldRef<"BuyerContract", 'Int'>
    readonly contractDate: FieldRef<"BuyerContract", 'DateTime'>
    readonly basePrice: FieldRef<"BuyerContract", 'Decimal'>
    readonly cpiBaseMonth: FieldRef<"BuyerContract", 'DateTime'>
    readonly paymentTerms: FieldRef<"BuyerContract", 'String'>
    readonly status: FieldRef<"BuyerContract", 'ContractStatus'>
    readonly versionLabel: FieldRef<"BuyerContract", 'String'>
    readonly createdAt: FieldRef<"BuyerContract", 'DateTime'>
    readonly updatedAt: FieldRef<"BuyerContract", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BuyerContract findUnique
   */
  export type BuyerContractFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerContract
     */
    select?: BuyerContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerContract
     */
    omit?: BuyerContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerContractInclude<ExtArgs> | null
    /**
     * Filter, which BuyerContract to fetch.
     */
    where: BuyerContractWhereUniqueInput
  }

  /**
   * BuyerContract findUniqueOrThrow
   */
  export type BuyerContractFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerContract
     */
    select?: BuyerContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerContract
     */
    omit?: BuyerContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerContractInclude<ExtArgs> | null
    /**
     * Filter, which BuyerContract to fetch.
     */
    where: BuyerContractWhereUniqueInput
  }

  /**
   * BuyerContract findFirst
   */
  export type BuyerContractFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerContract
     */
    select?: BuyerContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerContract
     */
    omit?: BuyerContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerContractInclude<ExtArgs> | null
    /**
     * Filter, which BuyerContract to fetch.
     */
    where?: BuyerContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyerContracts to fetch.
     */
    orderBy?: BuyerContractOrderByWithRelationInput | BuyerContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuyerContracts.
     */
    cursor?: BuyerContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyerContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyerContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuyerContracts.
     */
    distinct?: BuyerContractScalarFieldEnum | BuyerContractScalarFieldEnum[]
  }

  /**
   * BuyerContract findFirstOrThrow
   */
  export type BuyerContractFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerContract
     */
    select?: BuyerContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerContract
     */
    omit?: BuyerContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerContractInclude<ExtArgs> | null
    /**
     * Filter, which BuyerContract to fetch.
     */
    where?: BuyerContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyerContracts to fetch.
     */
    orderBy?: BuyerContractOrderByWithRelationInput | BuyerContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuyerContracts.
     */
    cursor?: BuyerContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyerContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyerContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuyerContracts.
     */
    distinct?: BuyerContractScalarFieldEnum | BuyerContractScalarFieldEnum[]
  }

  /**
   * BuyerContract findMany
   */
  export type BuyerContractFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerContract
     */
    select?: BuyerContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerContract
     */
    omit?: BuyerContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerContractInclude<ExtArgs> | null
    /**
     * Filter, which BuyerContracts to fetch.
     */
    where?: BuyerContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyerContracts to fetch.
     */
    orderBy?: BuyerContractOrderByWithRelationInput | BuyerContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BuyerContracts.
     */
    cursor?: BuyerContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyerContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyerContracts.
     */
    skip?: number
    distinct?: BuyerContractScalarFieldEnum | BuyerContractScalarFieldEnum[]
  }

  /**
   * BuyerContract create
   */
  export type BuyerContractCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerContract
     */
    select?: BuyerContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerContract
     */
    omit?: BuyerContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerContractInclude<ExtArgs> | null
    /**
     * The data needed to create a BuyerContract.
     */
    data: XOR<BuyerContractCreateInput, BuyerContractUncheckedCreateInput>
  }

  /**
   * BuyerContract createMany
   */
  export type BuyerContractCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BuyerContracts.
     */
    data: BuyerContractCreateManyInput | BuyerContractCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BuyerContract update
   */
  export type BuyerContractUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerContract
     */
    select?: BuyerContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerContract
     */
    omit?: BuyerContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerContractInclude<ExtArgs> | null
    /**
     * The data needed to update a BuyerContract.
     */
    data: XOR<BuyerContractUpdateInput, BuyerContractUncheckedUpdateInput>
    /**
     * Choose, which BuyerContract to update.
     */
    where: BuyerContractWhereUniqueInput
  }

  /**
   * BuyerContract updateMany
   */
  export type BuyerContractUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BuyerContracts.
     */
    data: XOR<BuyerContractUpdateManyMutationInput, BuyerContractUncheckedUpdateManyInput>
    /**
     * Filter which BuyerContracts to update
     */
    where?: BuyerContractWhereInput
    /**
     * Limit how many BuyerContracts to update.
     */
    limit?: number
  }

  /**
   * BuyerContract upsert
   */
  export type BuyerContractUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerContract
     */
    select?: BuyerContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerContract
     */
    omit?: BuyerContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerContractInclude<ExtArgs> | null
    /**
     * The filter to search for the BuyerContract to update in case it exists.
     */
    where: BuyerContractWhereUniqueInput
    /**
     * In case the BuyerContract found by the `where` argument doesn't exist, create a new BuyerContract with this data.
     */
    create: XOR<BuyerContractCreateInput, BuyerContractUncheckedCreateInput>
    /**
     * In case the BuyerContract was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuyerContractUpdateInput, BuyerContractUncheckedUpdateInput>
  }

  /**
   * BuyerContract delete
   */
  export type BuyerContractDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerContract
     */
    select?: BuyerContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerContract
     */
    omit?: BuyerContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerContractInclude<ExtArgs> | null
    /**
     * Filter which BuyerContract to delete.
     */
    where: BuyerContractWhereUniqueInput
  }

  /**
   * BuyerContract deleteMany
   */
  export type BuyerContractDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuyerContracts to delete
     */
    where?: BuyerContractWhereInput
    /**
     * Limit how many BuyerContracts to delete.
     */
    limit?: number
  }

  /**
   * BuyerContract.payments
   */
  export type BuyerContract$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerPayment
     */
    select?: BuyerPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerPayment
     */
    omit?: BuyerPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerPaymentInclude<ExtArgs> | null
    where?: BuyerPaymentWhereInput
    orderBy?: BuyerPaymentOrderByWithRelationInput | BuyerPaymentOrderByWithRelationInput[]
    cursor?: BuyerPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuyerPaymentScalarFieldEnum | BuyerPaymentScalarFieldEnum[]
  }

  /**
   * BuyerContract without action
   */
  export type BuyerContractDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerContract
     */
    select?: BuyerContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerContract
     */
    omit?: BuyerContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerContractInclude<ExtArgs> | null
  }


  /**
   * Model BuyerPayment
   */

  export type AggregateBuyerPayment = {
    _count: BuyerPaymentCountAggregateOutputType | null
    _avg: BuyerPaymentAvgAggregateOutputType | null
    _sum: BuyerPaymentSumAggregateOutputType | null
    _min: BuyerPaymentMinAggregateOutputType | null
    _max: BuyerPaymentMaxAggregateOutputType | null
  }

  export type BuyerPaymentAvgAggregateOutputType = {
    id: number | null
    contractId: number | null
    amountNominal: Decimal | null
    cpiFactor: Decimal | null
    amountIndexed: Decimal | null
  }

  export type BuyerPaymentSumAggregateOutputType = {
    id: number | null
    contractId: number | null
    amountNominal: Decimal | null
    cpiFactor: Decimal | null
    amountIndexed: Decimal | null
  }

  export type BuyerPaymentMinAggregateOutputType = {
    id: number | null
    contractId: number | null
    dueDate: Date | null
    paidDate: Date | null
    amountNominal: Decimal | null
    cpiFactor: Decimal | null
    amountIndexed: Decimal | null
    method: $Enums.PaymentMethod | null
    reference: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BuyerPaymentMaxAggregateOutputType = {
    id: number | null
    contractId: number | null
    dueDate: Date | null
    paidDate: Date | null
    amountNominal: Decimal | null
    cpiFactor: Decimal | null
    amountIndexed: Decimal | null
    method: $Enums.PaymentMethod | null
    reference: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BuyerPaymentCountAggregateOutputType = {
    id: number
    contractId: number
    dueDate: number
    paidDate: number
    amountNominal: number
    cpiFactor: number
    amountIndexed: number
    method: number
    reference: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BuyerPaymentAvgAggregateInputType = {
    id?: true
    contractId?: true
    amountNominal?: true
    cpiFactor?: true
    amountIndexed?: true
  }

  export type BuyerPaymentSumAggregateInputType = {
    id?: true
    contractId?: true
    amountNominal?: true
    cpiFactor?: true
    amountIndexed?: true
  }

  export type BuyerPaymentMinAggregateInputType = {
    id?: true
    contractId?: true
    dueDate?: true
    paidDate?: true
    amountNominal?: true
    cpiFactor?: true
    amountIndexed?: true
    method?: true
    reference?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BuyerPaymentMaxAggregateInputType = {
    id?: true
    contractId?: true
    dueDate?: true
    paidDate?: true
    amountNominal?: true
    cpiFactor?: true
    amountIndexed?: true
    method?: true
    reference?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BuyerPaymentCountAggregateInputType = {
    id?: true
    contractId?: true
    dueDate?: true
    paidDate?: true
    amountNominal?: true
    cpiFactor?: true
    amountIndexed?: true
    method?: true
    reference?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BuyerPaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuyerPayment to aggregate.
     */
    where?: BuyerPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyerPayments to fetch.
     */
    orderBy?: BuyerPaymentOrderByWithRelationInput | BuyerPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuyerPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyerPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyerPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BuyerPayments
    **/
    _count?: true | BuyerPaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BuyerPaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BuyerPaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuyerPaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuyerPaymentMaxAggregateInputType
  }

  export type GetBuyerPaymentAggregateType<T extends BuyerPaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateBuyerPayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuyerPayment[P]>
      : GetScalarType<T[P], AggregateBuyerPayment[P]>
  }




  export type BuyerPaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyerPaymentWhereInput
    orderBy?: BuyerPaymentOrderByWithAggregationInput | BuyerPaymentOrderByWithAggregationInput[]
    by: BuyerPaymentScalarFieldEnum[] | BuyerPaymentScalarFieldEnum
    having?: BuyerPaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuyerPaymentCountAggregateInputType | true
    _avg?: BuyerPaymentAvgAggregateInputType
    _sum?: BuyerPaymentSumAggregateInputType
    _min?: BuyerPaymentMinAggregateInputType
    _max?: BuyerPaymentMaxAggregateInputType
  }

  export type BuyerPaymentGroupByOutputType = {
    id: number
    contractId: number
    dueDate: Date
    paidDate: Date | null
    amountNominal: Decimal
    cpiFactor: Decimal
    amountIndexed: Decimal
    method: $Enums.PaymentMethod
    reference: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: BuyerPaymentCountAggregateOutputType | null
    _avg: BuyerPaymentAvgAggregateOutputType | null
    _sum: BuyerPaymentSumAggregateOutputType | null
    _min: BuyerPaymentMinAggregateOutputType | null
    _max: BuyerPaymentMaxAggregateOutputType | null
  }

  type GetBuyerPaymentGroupByPayload<T extends BuyerPaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuyerPaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuyerPaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuyerPaymentGroupByOutputType[P]>
            : GetScalarType<T[P], BuyerPaymentGroupByOutputType[P]>
        }
      >
    >


  export type BuyerPaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contractId?: boolean
    dueDate?: boolean
    paidDate?: boolean
    amountNominal?: boolean
    cpiFactor?: boolean
    amountIndexed?: boolean
    method?: boolean
    reference?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contract?: boolean | BuyerContractDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buyerPayment"]>



  export type BuyerPaymentSelectScalar = {
    id?: boolean
    contractId?: boolean
    dueDate?: boolean
    paidDate?: boolean
    amountNominal?: boolean
    cpiFactor?: boolean
    amountIndexed?: boolean
    method?: boolean
    reference?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BuyerPaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "contractId" | "dueDate" | "paidDate" | "amountNominal" | "cpiFactor" | "amountIndexed" | "method" | "reference" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["buyerPayment"]>
  export type BuyerPaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | BuyerContractDefaultArgs<ExtArgs>
  }

  export type $BuyerPaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BuyerPayment"
    objects: {
      contract: Prisma.$BuyerContractPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      contractId: number
      dueDate: Date
      paidDate: Date | null
      amountNominal: Prisma.Decimal
      cpiFactor: Prisma.Decimal
      amountIndexed: Prisma.Decimal
      method: $Enums.PaymentMethod
      reference: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["buyerPayment"]>
    composites: {}
  }

  type BuyerPaymentGetPayload<S extends boolean | null | undefined | BuyerPaymentDefaultArgs> = $Result.GetResult<Prisma.$BuyerPaymentPayload, S>

  type BuyerPaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BuyerPaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BuyerPaymentCountAggregateInputType | true
    }

  export interface BuyerPaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BuyerPayment'], meta: { name: 'BuyerPayment' } }
    /**
     * Find zero or one BuyerPayment that matches the filter.
     * @param {BuyerPaymentFindUniqueArgs} args - Arguments to find a BuyerPayment
     * @example
     * // Get one BuyerPayment
     * const buyerPayment = await prisma.buyerPayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuyerPaymentFindUniqueArgs>(args: SelectSubset<T, BuyerPaymentFindUniqueArgs<ExtArgs>>): Prisma__BuyerPaymentClient<$Result.GetResult<Prisma.$BuyerPaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BuyerPayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BuyerPaymentFindUniqueOrThrowArgs} args - Arguments to find a BuyerPayment
     * @example
     * // Get one BuyerPayment
     * const buyerPayment = await prisma.buyerPayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuyerPaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, BuyerPaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuyerPaymentClient<$Result.GetResult<Prisma.$BuyerPaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BuyerPayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerPaymentFindFirstArgs} args - Arguments to find a BuyerPayment
     * @example
     * // Get one BuyerPayment
     * const buyerPayment = await prisma.buyerPayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuyerPaymentFindFirstArgs>(args?: SelectSubset<T, BuyerPaymentFindFirstArgs<ExtArgs>>): Prisma__BuyerPaymentClient<$Result.GetResult<Prisma.$BuyerPaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BuyerPayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerPaymentFindFirstOrThrowArgs} args - Arguments to find a BuyerPayment
     * @example
     * // Get one BuyerPayment
     * const buyerPayment = await prisma.buyerPayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuyerPaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, BuyerPaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuyerPaymentClient<$Result.GetResult<Prisma.$BuyerPaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BuyerPayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerPaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BuyerPayments
     * const buyerPayments = await prisma.buyerPayment.findMany()
     * 
     * // Get first 10 BuyerPayments
     * const buyerPayments = await prisma.buyerPayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buyerPaymentWithIdOnly = await prisma.buyerPayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BuyerPaymentFindManyArgs>(args?: SelectSubset<T, BuyerPaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BuyerPayment.
     * @param {BuyerPaymentCreateArgs} args - Arguments to create a BuyerPayment.
     * @example
     * // Create one BuyerPayment
     * const BuyerPayment = await prisma.buyerPayment.create({
     *   data: {
     *     // ... data to create a BuyerPayment
     *   }
     * })
     * 
     */
    create<T extends BuyerPaymentCreateArgs>(args: SelectSubset<T, BuyerPaymentCreateArgs<ExtArgs>>): Prisma__BuyerPaymentClient<$Result.GetResult<Prisma.$BuyerPaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BuyerPayments.
     * @param {BuyerPaymentCreateManyArgs} args - Arguments to create many BuyerPayments.
     * @example
     * // Create many BuyerPayments
     * const buyerPayment = await prisma.buyerPayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuyerPaymentCreateManyArgs>(args?: SelectSubset<T, BuyerPaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BuyerPayment.
     * @param {BuyerPaymentDeleteArgs} args - Arguments to delete one BuyerPayment.
     * @example
     * // Delete one BuyerPayment
     * const BuyerPayment = await prisma.buyerPayment.delete({
     *   where: {
     *     // ... filter to delete one BuyerPayment
     *   }
     * })
     * 
     */
    delete<T extends BuyerPaymentDeleteArgs>(args: SelectSubset<T, BuyerPaymentDeleteArgs<ExtArgs>>): Prisma__BuyerPaymentClient<$Result.GetResult<Prisma.$BuyerPaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BuyerPayment.
     * @param {BuyerPaymentUpdateArgs} args - Arguments to update one BuyerPayment.
     * @example
     * // Update one BuyerPayment
     * const buyerPayment = await prisma.buyerPayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuyerPaymentUpdateArgs>(args: SelectSubset<T, BuyerPaymentUpdateArgs<ExtArgs>>): Prisma__BuyerPaymentClient<$Result.GetResult<Prisma.$BuyerPaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BuyerPayments.
     * @param {BuyerPaymentDeleteManyArgs} args - Arguments to filter BuyerPayments to delete.
     * @example
     * // Delete a few BuyerPayments
     * const { count } = await prisma.buyerPayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuyerPaymentDeleteManyArgs>(args?: SelectSubset<T, BuyerPaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BuyerPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerPaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BuyerPayments
     * const buyerPayment = await prisma.buyerPayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuyerPaymentUpdateManyArgs>(args: SelectSubset<T, BuyerPaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BuyerPayment.
     * @param {BuyerPaymentUpsertArgs} args - Arguments to update or create a BuyerPayment.
     * @example
     * // Update or create a BuyerPayment
     * const buyerPayment = await prisma.buyerPayment.upsert({
     *   create: {
     *     // ... data to create a BuyerPayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BuyerPayment we want to update
     *   }
     * })
     */
    upsert<T extends BuyerPaymentUpsertArgs>(args: SelectSubset<T, BuyerPaymentUpsertArgs<ExtArgs>>): Prisma__BuyerPaymentClient<$Result.GetResult<Prisma.$BuyerPaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BuyerPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerPaymentCountArgs} args - Arguments to filter BuyerPayments to count.
     * @example
     * // Count the number of BuyerPayments
     * const count = await prisma.buyerPayment.count({
     *   where: {
     *     // ... the filter for the BuyerPayments we want to count
     *   }
     * })
    **/
    count<T extends BuyerPaymentCountArgs>(
      args?: Subset<T, BuyerPaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuyerPaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BuyerPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerPaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuyerPaymentAggregateArgs>(args: Subset<T, BuyerPaymentAggregateArgs>): Prisma.PrismaPromise<GetBuyerPaymentAggregateType<T>>

    /**
     * Group by BuyerPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerPaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuyerPaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuyerPaymentGroupByArgs['orderBy'] }
        : { orderBy?: BuyerPaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuyerPaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuyerPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BuyerPayment model
   */
  readonly fields: BuyerPaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BuyerPayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuyerPaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contract<T extends BuyerContractDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BuyerContractDefaultArgs<ExtArgs>>): Prisma__BuyerContractClient<$Result.GetResult<Prisma.$BuyerContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BuyerPayment model
   */
  interface BuyerPaymentFieldRefs {
    readonly id: FieldRef<"BuyerPayment", 'Int'>
    readonly contractId: FieldRef<"BuyerPayment", 'Int'>
    readonly dueDate: FieldRef<"BuyerPayment", 'DateTime'>
    readonly paidDate: FieldRef<"BuyerPayment", 'DateTime'>
    readonly amountNominal: FieldRef<"BuyerPayment", 'Decimal'>
    readonly cpiFactor: FieldRef<"BuyerPayment", 'Decimal'>
    readonly amountIndexed: FieldRef<"BuyerPayment", 'Decimal'>
    readonly method: FieldRef<"BuyerPayment", 'PaymentMethod'>
    readonly reference: FieldRef<"BuyerPayment", 'String'>
    readonly notes: FieldRef<"BuyerPayment", 'String'>
    readonly createdAt: FieldRef<"BuyerPayment", 'DateTime'>
    readonly updatedAt: FieldRef<"BuyerPayment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BuyerPayment findUnique
   */
  export type BuyerPaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerPayment
     */
    select?: BuyerPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerPayment
     */
    omit?: BuyerPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerPaymentInclude<ExtArgs> | null
    /**
     * Filter, which BuyerPayment to fetch.
     */
    where: BuyerPaymentWhereUniqueInput
  }

  /**
   * BuyerPayment findUniqueOrThrow
   */
  export type BuyerPaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerPayment
     */
    select?: BuyerPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerPayment
     */
    omit?: BuyerPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerPaymentInclude<ExtArgs> | null
    /**
     * Filter, which BuyerPayment to fetch.
     */
    where: BuyerPaymentWhereUniqueInput
  }

  /**
   * BuyerPayment findFirst
   */
  export type BuyerPaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerPayment
     */
    select?: BuyerPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerPayment
     */
    omit?: BuyerPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerPaymentInclude<ExtArgs> | null
    /**
     * Filter, which BuyerPayment to fetch.
     */
    where?: BuyerPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyerPayments to fetch.
     */
    orderBy?: BuyerPaymentOrderByWithRelationInput | BuyerPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuyerPayments.
     */
    cursor?: BuyerPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyerPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyerPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuyerPayments.
     */
    distinct?: BuyerPaymentScalarFieldEnum | BuyerPaymentScalarFieldEnum[]
  }

  /**
   * BuyerPayment findFirstOrThrow
   */
  export type BuyerPaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerPayment
     */
    select?: BuyerPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerPayment
     */
    omit?: BuyerPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerPaymentInclude<ExtArgs> | null
    /**
     * Filter, which BuyerPayment to fetch.
     */
    where?: BuyerPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyerPayments to fetch.
     */
    orderBy?: BuyerPaymentOrderByWithRelationInput | BuyerPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuyerPayments.
     */
    cursor?: BuyerPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyerPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyerPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuyerPayments.
     */
    distinct?: BuyerPaymentScalarFieldEnum | BuyerPaymentScalarFieldEnum[]
  }

  /**
   * BuyerPayment findMany
   */
  export type BuyerPaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerPayment
     */
    select?: BuyerPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerPayment
     */
    omit?: BuyerPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerPaymentInclude<ExtArgs> | null
    /**
     * Filter, which BuyerPayments to fetch.
     */
    where?: BuyerPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyerPayments to fetch.
     */
    orderBy?: BuyerPaymentOrderByWithRelationInput | BuyerPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BuyerPayments.
     */
    cursor?: BuyerPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyerPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyerPayments.
     */
    skip?: number
    distinct?: BuyerPaymentScalarFieldEnum | BuyerPaymentScalarFieldEnum[]
  }

  /**
   * BuyerPayment create
   */
  export type BuyerPaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerPayment
     */
    select?: BuyerPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerPayment
     */
    omit?: BuyerPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerPaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a BuyerPayment.
     */
    data: XOR<BuyerPaymentCreateInput, BuyerPaymentUncheckedCreateInput>
  }

  /**
   * BuyerPayment createMany
   */
  export type BuyerPaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BuyerPayments.
     */
    data: BuyerPaymentCreateManyInput | BuyerPaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BuyerPayment update
   */
  export type BuyerPaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerPayment
     */
    select?: BuyerPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerPayment
     */
    omit?: BuyerPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerPaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a BuyerPayment.
     */
    data: XOR<BuyerPaymentUpdateInput, BuyerPaymentUncheckedUpdateInput>
    /**
     * Choose, which BuyerPayment to update.
     */
    where: BuyerPaymentWhereUniqueInput
  }

  /**
   * BuyerPayment updateMany
   */
  export type BuyerPaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BuyerPayments.
     */
    data: XOR<BuyerPaymentUpdateManyMutationInput, BuyerPaymentUncheckedUpdateManyInput>
    /**
     * Filter which BuyerPayments to update
     */
    where?: BuyerPaymentWhereInput
    /**
     * Limit how many BuyerPayments to update.
     */
    limit?: number
  }

  /**
   * BuyerPayment upsert
   */
  export type BuyerPaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerPayment
     */
    select?: BuyerPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerPayment
     */
    omit?: BuyerPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerPaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the BuyerPayment to update in case it exists.
     */
    where: BuyerPaymentWhereUniqueInput
    /**
     * In case the BuyerPayment found by the `where` argument doesn't exist, create a new BuyerPayment with this data.
     */
    create: XOR<BuyerPaymentCreateInput, BuyerPaymentUncheckedCreateInput>
    /**
     * In case the BuyerPayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuyerPaymentUpdateInput, BuyerPaymentUncheckedUpdateInput>
  }

  /**
   * BuyerPayment delete
   */
  export type BuyerPaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerPayment
     */
    select?: BuyerPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerPayment
     */
    omit?: BuyerPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerPaymentInclude<ExtArgs> | null
    /**
     * Filter which BuyerPayment to delete.
     */
    where: BuyerPaymentWhereUniqueInput
  }

  /**
   * BuyerPayment deleteMany
   */
  export type BuyerPaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuyerPayments to delete
     */
    where?: BuyerPaymentWhereInput
    /**
     * Limit how many BuyerPayments to delete.
     */
    limit?: number
  }

  /**
   * BuyerPayment without action
   */
  export type BuyerPaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerPayment
     */
    select?: BuyerPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyerPayment
     */
    omit?: BuyerPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerPaymentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    startDate: 'startDate',
    endDatePlanned: 'endDatePlanned',
    endDateActual: 'endDateActual',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const UnitScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    unitCode: 'unitCode',
    floor: 'floor',
    rooms: 'rooms',
    areaSqm: 'areaSqm',
    priceList: 'priceList',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UnitScalarFieldEnum = (typeof UnitScalarFieldEnum)[keyof typeof UnitScalarFieldEnum]


  export const BuyerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    idNumber: 'idNumber',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BuyerScalarFieldEnum = (typeof BuyerScalarFieldEnum)[keyof typeof BuyerScalarFieldEnum]


  export const BuyerContractScalarFieldEnum: {
    id: 'id',
    buyerId: 'buyerId',
    unitId: 'unitId',
    contractDate: 'contractDate',
    basePrice: 'basePrice',
    cpiBaseMonth: 'cpiBaseMonth',
    paymentTerms: 'paymentTerms',
    status: 'status',
    versionLabel: 'versionLabel',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BuyerContractScalarFieldEnum = (typeof BuyerContractScalarFieldEnum)[keyof typeof BuyerContractScalarFieldEnum]


  export const BuyerPaymentScalarFieldEnum: {
    id: 'id',
    contractId: 'contractId',
    dueDate: 'dueDate',
    paidDate: 'paidDate',
    amountNominal: 'amountNominal',
    cpiFactor: 'cpiFactor',
    amountIndexed: 'amountIndexed',
    method: 'method',
    reference: 'reference',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BuyerPaymentScalarFieldEnum = (typeof BuyerPaymentScalarFieldEnum)[keyof typeof BuyerPaymentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const ProjectOrderByRelevanceFieldEnum: {
    name: 'name',
    address: 'address',
    notes: 'notes'
  };

  export type ProjectOrderByRelevanceFieldEnum = (typeof ProjectOrderByRelevanceFieldEnum)[keyof typeof ProjectOrderByRelevanceFieldEnum]


  export const UnitOrderByRelevanceFieldEnum: {
    unitCode: 'unitCode'
  };

  export type UnitOrderByRelevanceFieldEnum = (typeof UnitOrderByRelevanceFieldEnum)[keyof typeof UnitOrderByRelevanceFieldEnum]


  export const BuyerOrderByRelevanceFieldEnum: {
    name: 'name',
    email: 'email',
    phone: 'phone',
    idNumber: 'idNumber',
    notes: 'notes'
  };

  export type BuyerOrderByRelevanceFieldEnum = (typeof BuyerOrderByRelevanceFieldEnum)[keyof typeof BuyerOrderByRelevanceFieldEnum]


  export const BuyerContractOrderByRelevanceFieldEnum: {
    paymentTerms: 'paymentTerms',
    versionLabel: 'versionLabel'
  };

  export type BuyerContractOrderByRelevanceFieldEnum = (typeof BuyerContractOrderByRelevanceFieldEnum)[keyof typeof BuyerContractOrderByRelevanceFieldEnum]


  export const BuyerPaymentOrderByRelevanceFieldEnum: {
    reference: 'reference',
    notes: 'notes'
  };

  export type BuyerPaymentOrderByRelevanceFieldEnum = (typeof BuyerPaymentOrderByRelevanceFieldEnum)[keyof typeof BuyerPaymentOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'UnitStatus'
   */
  export type EnumUnitStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UnitStatus'>
    


  /**
   * Reference to a field of type 'ContractStatus'
   */
  export type EnumContractStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractStatus'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: IntFilter<"Project"> | number
    name?: StringFilter<"Project"> | string
    address?: StringNullableFilter<"Project"> | string | null
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    endDatePlanned?: DateTimeNullableFilter<"Project"> | Date | string | null
    endDateActual?: DateTimeNullableFilter<"Project"> | Date | string | null
    notes?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    units?: UnitListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    endDatePlanned?: SortOrderInput | SortOrder
    endDateActual?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    units?: UnitOrderByRelationAggregateInput
    _relevance?: ProjectOrderByRelevanceInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    address?: StringNullableFilter<"Project"> | string | null
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    endDatePlanned?: DateTimeNullableFilter<"Project"> | Date | string | null
    endDateActual?: DateTimeNullableFilter<"Project"> | Date | string | null
    notes?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    units?: UnitListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    endDatePlanned?: SortOrderInput | SortOrder
    endDateActual?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Project"> | number
    name?: StringWithAggregatesFilter<"Project"> | string
    address?: StringNullableWithAggregatesFilter<"Project"> | string | null
    startDate?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    endDatePlanned?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    endDateActual?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"Project"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type UnitWhereInput = {
    AND?: UnitWhereInput | UnitWhereInput[]
    OR?: UnitWhereInput[]
    NOT?: UnitWhereInput | UnitWhereInput[]
    id?: IntFilter<"Unit"> | number
    projectId?: IntFilter<"Unit"> | number
    unitCode?: StringFilter<"Unit"> | string
    floor?: IntNullableFilter<"Unit"> | number | null
    rooms?: DecimalNullableFilter<"Unit"> | Decimal | DecimalJsLike | number | string | null
    areaSqm?: DecimalNullableFilter<"Unit"> | Decimal | DecimalJsLike | number | string | null
    priceList?: DecimalNullableFilter<"Unit"> | Decimal | DecimalJsLike | number | string | null
    status?: EnumUnitStatusFilter<"Unit"> | $Enums.UnitStatus
    createdAt?: DateTimeFilter<"Unit"> | Date | string
    updatedAt?: DateTimeFilter<"Unit"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    contracts?: BuyerContractListRelationFilter
  }

  export type UnitOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    unitCode?: SortOrder
    floor?: SortOrderInput | SortOrder
    rooms?: SortOrderInput | SortOrder
    areaSqm?: SortOrderInput | SortOrder
    priceList?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
    contracts?: BuyerContractOrderByRelationAggregateInput
    _relevance?: UnitOrderByRelevanceInput
  }

  export type UnitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    projectId_unitCode?: UnitProjectIdUnitCodeCompoundUniqueInput
    AND?: UnitWhereInput | UnitWhereInput[]
    OR?: UnitWhereInput[]
    NOT?: UnitWhereInput | UnitWhereInput[]
    projectId?: IntFilter<"Unit"> | number
    unitCode?: StringFilter<"Unit"> | string
    floor?: IntNullableFilter<"Unit"> | number | null
    rooms?: DecimalNullableFilter<"Unit"> | Decimal | DecimalJsLike | number | string | null
    areaSqm?: DecimalNullableFilter<"Unit"> | Decimal | DecimalJsLike | number | string | null
    priceList?: DecimalNullableFilter<"Unit"> | Decimal | DecimalJsLike | number | string | null
    status?: EnumUnitStatusFilter<"Unit"> | $Enums.UnitStatus
    createdAt?: DateTimeFilter<"Unit"> | Date | string
    updatedAt?: DateTimeFilter<"Unit"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    contracts?: BuyerContractListRelationFilter
  }, "id" | "projectId_unitCode">

  export type UnitOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    unitCode?: SortOrder
    floor?: SortOrderInput | SortOrder
    rooms?: SortOrderInput | SortOrder
    areaSqm?: SortOrderInput | SortOrder
    priceList?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UnitCountOrderByAggregateInput
    _avg?: UnitAvgOrderByAggregateInput
    _max?: UnitMaxOrderByAggregateInput
    _min?: UnitMinOrderByAggregateInput
    _sum?: UnitSumOrderByAggregateInput
  }

  export type UnitScalarWhereWithAggregatesInput = {
    AND?: UnitScalarWhereWithAggregatesInput | UnitScalarWhereWithAggregatesInput[]
    OR?: UnitScalarWhereWithAggregatesInput[]
    NOT?: UnitScalarWhereWithAggregatesInput | UnitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Unit"> | number
    projectId?: IntWithAggregatesFilter<"Unit"> | number
    unitCode?: StringWithAggregatesFilter<"Unit"> | string
    floor?: IntNullableWithAggregatesFilter<"Unit"> | number | null
    rooms?: DecimalNullableWithAggregatesFilter<"Unit"> | Decimal | DecimalJsLike | number | string | null
    areaSqm?: DecimalNullableWithAggregatesFilter<"Unit"> | Decimal | DecimalJsLike | number | string | null
    priceList?: DecimalNullableWithAggregatesFilter<"Unit"> | Decimal | DecimalJsLike | number | string | null
    status?: EnumUnitStatusWithAggregatesFilter<"Unit"> | $Enums.UnitStatus
    createdAt?: DateTimeWithAggregatesFilter<"Unit"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Unit"> | Date | string
  }

  export type BuyerWhereInput = {
    AND?: BuyerWhereInput | BuyerWhereInput[]
    OR?: BuyerWhereInput[]
    NOT?: BuyerWhereInput | BuyerWhereInput[]
    id?: IntFilter<"Buyer"> | number
    name?: StringFilter<"Buyer"> | string
    email?: StringNullableFilter<"Buyer"> | string | null
    phone?: StringNullableFilter<"Buyer"> | string | null
    idNumber?: StringNullableFilter<"Buyer"> | string | null
    notes?: StringNullableFilter<"Buyer"> | string | null
    createdAt?: DateTimeFilter<"Buyer"> | Date | string
    updatedAt?: DateTimeFilter<"Buyer"> | Date | string
    contracts?: BuyerContractListRelationFilter
  }

  export type BuyerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    idNumber?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contracts?: BuyerContractOrderByRelationAggregateInput
    _relevance?: BuyerOrderByRelevanceInput
  }

  export type BuyerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BuyerWhereInput | BuyerWhereInput[]
    OR?: BuyerWhereInput[]
    NOT?: BuyerWhereInput | BuyerWhereInput[]
    name?: StringFilter<"Buyer"> | string
    email?: StringNullableFilter<"Buyer"> | string | null
    phone?: StringNullableFilter<"Buyer"> | string | null
    idNumber?: StringNullableFilter<"Buyer"> | string | null
    notes?: StringNullableFilter<"Buyer"> | string | null
    createdAt?: DateTimeFilter<"Buyer"> | Date | string
    updatedAt?: DateTimeFilter<"Buyer"> | Date | string
    contracts?: BuyerContractListRelationFilter
  }, "id">

  export type BuyerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    idNumber?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BuyerCountOrderByAggregateInput
    _avg?: BuyerAvgOrderByAggregateInput
    _max?: BuyerMaxOrderByAggregateInput
    _min?: BuyerMinOrderByAggregateInput
    _sum?: BuyerSumOrderByAggregateInput
  }

  export type BuyerScalarWhereWithAggregatesInput = {
    AND?: BuyerScalarWhereWithAggregatesInput | BuyerScalarWhereWithAggregatesInput[]
    OR?: BuyerScalarWhereWithAggregatesInput[]
    NOT?: BuyerScalarWhereWithAggregatesInput | BuyerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Buyer"> | number
    name?: StringWithAggregatesFilter<"Buyer"> | string
    email?: StringNullableWithAggregatesFilter<"Buyer"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Buyer"> | string | null
    idNumber?: StringNullableWithAggregatesFilter<"Buyer"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Buyer"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Buyer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Buyer"> | Date | string
  }

  export type BuyerContractWhereInput = {
    AND?: BuyerContractWhereInput | BuyerContractWhereInput[]
    OR?: BuyerContractWhereInput[]
    NOT?: BuyerContractWhereInput | BuyerContractWhereInput[]
    id?: IntFilter<"BuyerContract"> | number
    buyerId?: IntFilter<"BuyerContract"> | number
    unitId?: IntFilter<"BuyerContract"> | number
    contractDate?: DateTimeFilter<"BuyerContract"> | Date | string
    basePrice?: DecimalFilter<"BuyerContract"> | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeFilter<"BuyerContract"> | Date | string
    paymentTerms?: StringNullableFilter<"BuyerContract"> | string | null
    status?: EnumContractStatusFilter<"BuyerContract"> | $Enums.ContractStatus
    versionLabel?: StringNullableFilter<"BuyerContract"> | string | null
    createdAt?: DateTimeFilter<"BuyerContract"> | Date | string
    updatedAt?: DateTimeFilter<"BuyerContract"> | Date | string
    buyer?: XOR<BuyerScalarRelationFilter, BuyerWhereInput>
    unit?: XOR<UnitScalarRelationFilter, UnitWhereInput>
    payments?: BuyerPaymentListRelationFilter
  }

  export type BuyerContractOrderByWithRelationInput = {
    id?: SortOrder
    buyerId?: SortOrder
    unitId?: SortOrder
    contractDate?: SortOrder
    basePrice?: SortOrder
    cpiBaseMonth?: SortOrder
    paymentTerms?: SortOrderInput | SortOrder
    status?: SortOrder
    versionLabel?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    buyer?: BuyerOrderByWithRelationInput
    unit?: UnitOrderByWithRelationInput
    payments?: BuyerPaymentOrderByRelationAggregateInput
    _relevance?: BuyerContractOrderByRelevanceInput
  }

  export type BuyerContractWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BuyerContractWhereInput | BuyerContractWhereInput[]
    OR?: BuyerContractWhereInput[]
    NOT?: BuyerContractWhereInput | BuyerContractWhereInput[]
    buyerId?: IntFilter<"BuyerContract"> | number
    unitId?: IntFilter<"BuyerContract"> | number
    contractDate?: DateTimeFilter<"BuyerContract"> | Date | string
    basePrice?: DecimalFilter<"BuyerContract"> | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeFilter<"BuyerContract"> | Date | string
    paymentTerms?: StringNullableFilter<"BuyerContract"> | string | null
    status?: EnumContractStatusFilter<"BuyerContract"> | $Enums.ContractStatus
    versionLabel?: StringNullableFilter<"BuyerContract"> | string | null
    createdAt?: DateTimeFilter<"BuyerContract"> | Date | string
    updatedAt?: DateTimeFilter<"BuyerContract"> | Date | string
    buyer?: XOR<BuyerScalarRelationFilter, BuyerWhereInput>
    unit?: XOR<UnitScalarRelationFilter, UnitWhereInput>
    payments?: BuyerPaymentListRelationFilter
  }, "id">

  export type BuyerContractOrderByWithAggregationInput = {
    id?: SortOrder
    buyerId?: SortOrder
    unitId?: SortOrder
    contractDate?: SortOrder
    basePrice?: SortOrder
    cpiBaseMonth?: SortOrder
    paymentTerms?: SortOrderInput | SortOrder
    status?: SortOrder
    versionLabel?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BuyerContractCountOrderByAggregateInput
    _avg?: BuyerContractAvgOrderByAggregateInput
    _max?: BuyerContractMaxOrderByAggregateInput
    _min?: BuyerContractMinOrderByAggregateInput
    _sum?: BuyerContractSumOrderByAggregateInput
  }

  export type BuyerContractScalarWhereWithAggregatesInput = {
    AND?: BuyerContractScalarWhereWithAggregatesInput | BuyerContractScalarWhereWithAggregatesInput[]
    OR?: BuyerContractScalarWhereWithAggregatesInput[]
    NOT?: BuyerContractScalarWhereWithAggregatesInput | BuyerContractScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BuyerContract"> | number
    buyerId?: IntWithAggregatesFilter<"BuyerContract"> | number
    unitId?: IntWithAggregatesFilter<"BuyerContract"> | number
    contractDate?: DateTimeWithAggregatesFilter<"BuyerContract"> | Date | string
    basePrice?: DecimalWithAggregatesFilter<"BuyerContract"> | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeWithAggregatesFilter<"BuyerContract"> | Date | string
    paymentTerms?: StringNullableWithAggregatesFilter<"BuyerContract"> | string | null
    status?: EnumContractStatusWithAggregatesFilter<"BuyerContract"> | $Enums.ContractStatus
    versionLabel?: StringNullableWithAggregatesFilter<"BuyerContract"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BuyerContract"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BuyerContract"> | Date | string
  }

  export type BuyerPaymentWhereInput = {
    AND?: BuyerPaymentWhereInput | BuyerPaymentWhereInput[]
    OR?: BuyerPaymentWhereInput[]
    NOT?: BuyerPaymentWhereInput | BuyerPaymentWhereInput[]
    id?: IntFilter<"BuyerPayment"> | number
    contractId?: IntFilter<"BuyerPayment"> | number
    dueDate?: DateTimeFilter<"BuyerPayment"> | Date | string
    paidDate?: DateTimeNullableFilter<"BuyerPayment"> | Date | string | null
    amountNominal?: DecimalFilter<"BuyerPayment"> | Decimal | DecimalJsLike | number | string
    cpiFactor?: DecimalFilter<"BuyerPayment"> | Decimal | DecimalJsLike | number | string
    amountIndexed?: DecimalFilter<"BuyerPayment"> | Decimal | DecimalJsLike | number | string
    method?: EnumPaymentMethodFilter<"BuyerPayment"> | $Enums.PaymentMethod
    reference?: StringNullableFilter<"BuyerPayment"> | string | null
    notes?: StringNullableFilter<"BuyerPayment"> | string | null
    createdAt?: DateTimeFilter<"BuyerPayment"> | Date | string
    updatedAt?: DateTimeFilter<"BuyerPayment"> | Date | string
    contract?: XOR<BuyerContractScalarRelationFilter, BuyerContractWhereInput>
  }

  export type BuyerPaymentOrderByWithRelationInput = {
    id?: SortOrder
    contractId?: SortOrder
    dueDate?: SortOrder
    paidDate?: SortOrderInput | SortOrder
    amountNominal?: SortOrder
    cpiFactor?: SortOrder
    amountIndexed?: SortOrder
    method?: SortOrder
    reference?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contract?: BuyerContractOrderByWithRelationInput
    _relevance?: BuyerPaymentOrderByRelevanceInput
  }

  export type BuyerPaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BuyerPaymentWhereInput | BuyerPaymentWhereInput[]
    OR?: BuyerPaymentWhereInput[]
    NOT?: BuyerPaymentWhereInput | BuyerPaymentWhereInput[]
    contractId?: IntFilter<"BuyerPayment"> | number
    dueDate?: DateTimeFilter<"BuyerPayment"> | Date | string
    paidDate?: DateTimeNullableFilter<"BuyerPayment"> | Date | string | null
    amountNominal?: DecimalFilter<"BuyerPayment"> | Decimal | DecimalJsLike | number | string
    cpiFactor?: DecimalFilter<"BuyerPayment"> | Decimal | DecimalJsLike | number | string
    amountIndexed?: DecimalFilter<"BuyerPayment"> | Decimal | DecimalJsLike | number | string
    method?: EnumPaymentMethodFilter<"BuyerPayment"> | $Enums.PaymentMethod
    reference?: StringNullableFilter<"BuyerPayment"> | string | null
    notes?: StringNullableFilter<"BuyerPayment"> | string | null
    createdAt?: DateTimeFilter<"BuyerPayment"> | Date | string
    updatedAt?: DateTimeFilter<"BuyerPayment"> | Date | string
    contract?: XOR<BuyerContractScalarRelationFilter, BuyerContractWhereInput>
  }, "id">

  export type BuyerPaymentOrderByWithAggregationInput = {
    id?: SortOrder
    contractId?: SortOrder
    dueDate?: SortOrder
    paidDate?: SortOrderInput | SortOrder
    amountNominal?: SortOrder
    cpiFactor?: SortOrder
    amountIndexed?: SortOrder
    method?: SortOrder
    reference?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BuyerPaymentCountOrderByAggregateInput
    _avg?: BuyerPaymentAvgOrderByAggregateInput
    _max?: BuyerPaymentMaxOrderByAggregateInput
    _min?: BuyerPaymentMinOrderByAggregateInput
    _sum?: BuyerPaymentSumOrderByAggregateInput
  }

  export type BuyerPaymentScalarWhereWithAggregatesInput = {
    AND?: BuyerPaymentScalarWhereWithAggregatesInput | BuyerPaymentScalarWhereWithAggregatesInput[]
    OR?: BuyerPaymentScalarWhereWithAggregatesInput[]
    NOT?: BuyerPaymentScalarWhereWithAggregatesInput | BuyerPaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BuyerPayment"> | number
    contractId?: IntWithAggregatesFilter<"BuyerPayment"> | number
    dueDate?: DateTimeWithAggregatesFilter<"BuyerPayment"> | Date | string
    paidDate?: DateTimeNullableWithAggregatesFilter<"BuyerPayment"> | Date | string | null
    amountNominal?: DecimalWithAggregatesFilter<"BuyerPayment"> | Decimal | DecimalJsLike | number | string
    cpiFactor?: DecimalWithAggregatesFilter<"BuyerPayment"> | Decimal | DecimalJsLike | number | string
    amountIndexed?: DecimalWithAggregatesFilter<"BuyerPayment"> | Decimal | DecimalJsLike | number | string
    method?: EnumPaymentMethodWithAggregatesFilter<"BuyerPayment"> | $Enums.PaymentMethod
    reference?: StringNullableWithAggregatesFilter<"BuyerPayment"> | string | null
    notes?: StringNullableWithAggregatesFilter<"BuyerPayment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BuyerPayment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BuyerPayment"> | Date | string
  }

  export type ProjectCreateInput = {
    name: string
    address?: string | null
    startDate?: Date | string | null
    endDatePlanned?: Date | string | null
    endDateActual?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    units?: UnitCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: number
    name: string
    address?: string | null
    startDate?: Date | string | null
    endDatePlanned?: Date | string | null
    endDateActual?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    units?: UnitUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDatePlanned?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDateActual?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    units?: UnitUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDatePlanned?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDateActual?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    units?: UnitUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: number
    name: string
    address?: string | null
    startDate?: Date | string | null
    endDatePlanned?: Date | string | null
    endDateActual?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDatePlanned?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDateActual?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDatePlanned?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDateActual?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UnitCreateInput = {
    unitCode: string
    floor?: number | null
    rooms?: Decimal | DecimalJsLike | number | string | null
    areaSqm?: Decimal | DecimalJsLike | number | string | null
    priceList?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.UnitStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutUnitsInput
    contracts?: BuyerContractCreateNestedManyWithoutUnitInput
  }

  export type UnitUncheckedCreateInput = {
    id?: number
    projectId: number
    unitCode: string
    floor?: number | null
    rooms?: Decimal | DecimalJsLike | number | string | null
    areaSqm?: Decimal | DecimalJsLike | number | string | null
    priceList?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.UnitStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: BuyerContractUncheckedCreateNestedManyWithoutUnitInput
  }

  export type UnitUpdateInput = {
    unitCode?: StringFieldUpdateOperationsInput | string
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    rooms?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaSqm?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priceList?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumUnitStatusFieldUpdateOperationsInput | $Enums.UnitStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutUnitsNestedInput
    contracts?: BuyerContractUpdateManyWithoutUnitNestedInput
  }

  export type UnitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    unitCode?: StringFieldUpdateOperationsInput | string
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    rooms?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaSqm?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priceList?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumUnitStatusFieldUpdateOperationsInput | $Enums.UnitStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: BuyerContractUncheckedUpdateManyWithoutUnitNestedInput
  }

  export type UnitCreateManyInput = {
    id?: number
    projectId: number
    unitCode: string
    floor?: number | null
    rooms?: Decimal | DecimalJsLike | number | string | null
    areaSqm?: Decimal | DecimalJsLike | number | string | null
    priceList?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.UnitStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UnitUpdateManyMutationInput = {
    unitCode?: StringFieldUpdateOperationsInput | string
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    rooms?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaSqm?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priceList?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumUnitStatusFieldUpdateOperationsInput | $Enums.UnitStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UnitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    unitCode?: StringFieldUpdateOperationsInput | string
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    rooms?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaSqm?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priceList?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumUnitStatusFieldUpdateOperationsInput | $Enums.UnitStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerCreateInput = {
    name: string
    email?: string | null
    phone?: string | null
    idNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: BuyerContractCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUncheckedCreateInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    idNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: BuyerContractUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: BuyerContractUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: BuyerContractUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerCreateManyInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    idNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuyerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerContractCreateInput = {
    contractDate: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    cpiBaseMonth: Date | string
    paymentTerms?: string | null
    status?: $Enums.ContractStatus
    versionLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer: BuyerCreateNestedOneWithoutContractsInput
    unit: UnitCreateNestedOneWithoutContractsInput
    payments?: BuyerPaymentCreateNestedManyWithoutContractInput
  }

  export type BuyerContractUncheckedCreateInput = {
    id?: number
    buyerId: number
    unitId: number
    contractDate: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    cpiBaseMonth: Date | string
    paymentTerms?: string | null
    status?: $Enums.ContractStatus
    versionLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payments?: BuyerPaymentUncheckedCreateNestedManyWithoutContractInput
  }

  export type BuyerContractUpdateInput = {
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: BuyerUpdateOneRequiredWithoutContractsNestedInput
    unit?: UnitUpdateOneRequiredWithoutContractsNestedInput
    payments?: BuyerPaymentUpdateManyWithoutContractNestedInput
  }

  export type BuyerContractUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyerId?: IntFieldUpdateOperationsInput | number
    unitId?: IntFieldUpdateOperationsInput | number
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: BuyerPaymentUncheckedUpdateManyWithoutContractNestedInput
  }

  export type BuyerContractCreateManyInput = {
    id?: number
    buyerId: number
    unitId: number
    contractDate: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    cpiBaseMonth: Date | string
    paymentTerms?: string | null
    status?: $Enums.ContractStatus
    versionLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuyerContractUpdateManyMutationInput = {
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerContractUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyerId?: IntFieldUpdateOperationsInput | number
    unitId?: IntFieldUpdateOperationsInput | number
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerPaymentCreateInput = {
    dueDate: Date | string
    paidDate?: Date | string | null
    amountNominal: Decimal | DecimalJsLike | number | string
    cpiFactor?: Decimal | DecimalJsLike | number | string
    amountIndexed: Decimal | DecimalJsLike | number | string
    method?: $Enums.PaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contract: BuyerContractCreateNestedOneWithoutPaymentsInput
  }

  export type BuyerPaymentUncheckedCreateInput = {
    id?: number
    contractId: number
    dueDate: Date | string
    paidDate?: Date | string | null
    amountNominal: Decimal | DecimalJsLike | number | string
    cpiFactor?: Decimal | DecimalJsLike | number | string
    amountIndexed: Decimal | DecimalJsLike | number | string
    method?: $Enums.PaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuyerPaymentUpdateInput = {
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountNominal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiFactor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amountIndexed?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: BuyerContractUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type BuyerPaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    contractId?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountNominal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiFactor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amountIndexed?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerPaymentCreateManyInput = {
    id?: number
    contractId: number
    dueDate: Date | string
    paidDate?: Date | string | null
    amountNominal: Decimal | DecimalJsLike | number | string
    cpiFactor?: Decimal | DecimalJsLike | number | string
    amountIndexed: Decimal | DecimalJsLike | number | string
    method?: $Enums.PaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuyerPaymentUpdateManyMutationInput = {
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountNominal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiFactor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amountIndexed?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerPaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    contractId?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountNominal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiFactor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amountIndexed?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UnitListRelationFilter = {
    every?: UnitWhereInput
    some?: UnitWhereInput
    none?: UnitWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UnitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelevanceInput = {
    fields: ProjectOrderByRelevanceFieldEnum | ProjectOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    startDate?: SortOrder
    endDatePlanned?: SortOrder
    endDateActual?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    startDate?: SortOrder
    endDatePlanned?: SortOrder
    endDateActual?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    startDate?: SortOrder
    endDatePlanned?: SortOrder
    endDateActual?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type EnumUnitStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UnitStatus | EnumUnitStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UnitStatus[]
    notIn?: $Enums.UnitStatus[]
    not?: NestedEnumUnitStatusFilter<$PrismaModel> | $Enums.UnitStatus
  }

  export type ProjectScalarRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type BuyerContractListRelationFilter = {
    every?: BuyerContractWhereInput
    some?: BuyerContractWhereInput
    none?: BuyerContractWhereInput
  }

  export type BuyerContractOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UnitOrderByRelevanceInput = {
    fields: UnitOrderByRelevanceFieldEnum | UnitOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UnitProjectIdUnitCodeCompoundUniqueInput = {
    projectId: number
    unitCode: string
  }

  export type UnitCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    unitCode?: SortOrder
    floor?: SortOrder
    rooms?: SortOrder
    areaSqm?: SortOrder
    priceList?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UnitAvgOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    floor?: SortOrder
    rooms?: SortOrder
    areaSqm?: SortOrder
    priceList?: SortOrder
  }

  export type UnitMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    unitCode?: SortOrder
    floor?: SortOrder
    rooms?: SortOrder
    areaSqm?: SortOrder
    priceList?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UnitMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    unitCode?: SortOrder
    floor?: SortOrder
    rooms?: SortOrder
    areaSqm?: SortOrder
    priceList?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UnitSumOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    floor?: SortOrder
    rooms?: SortOrder
    areaSqm?: SortOrder
    priceList?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type EnumUnitStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UnitStatus | EnumUnitStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UnitStatus[]
    notIn?: $Enums.UnitStatus[]
    not?: NestedEnumUnitStatusWithAggregatesFilter<$PrismaModel> | $Enums.UnitStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUnitStatusFilter<$PrismaModel>
    _max?: NestedEnumUnitStatusFilter<$PrismaModel>
  }

  export type BuyerOrderByRelevanceInput = {
    fields: BuyerOrderByRelevanceFieldEnum | BuyerOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BuyerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    idNumber?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuyerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BuyerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    idNumber?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuyerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    idNumber?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuyerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumContractStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[]
    notIn?: $Enums.ContractStatus[]
    not?: NestedEnumContractStatusFilter<$PrismaModel> | $Enums.ContractStatus
  }

  export type BuyerScalarRelationFilter = {
    is?: BuyerWhereInput
    isNot?: BuyerWhereInput
  }

  export type UnitScalarRelationFilter = {
    is?: UnitWhereInput
    isNot?: UnitWhereInput
  }

  export type BuyerPaymentListRelationFilter = {
    every?: BuyerPaymentWhereInput
    some?: BuyerPaymentWhereInput
    none?: BuyerPaymentWhereInput
  }

  export type BuyerPaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BuyerContractOrderByRelevanceInput = {
    fields: BuyerContractOrderByRelevanceFieldEnum | BuyerContractOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BuyerContractCountOrderByAggregateInput = {
    id?: SortOrder
    buyerId?: SortOrder
    unitId?: SortOrder
    contractDate?: SortOrder
    basePrice?: SortOrder
    cpiBaseMonth?: SortOrder
    paymentTerms?: SortOrder
    status?: SortOrder
    versionLabel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuyerContractAvgOrderByAggregateInput = {
    id?: SortOrder
    buyerId?: SortOrder
    unitId?: SortOrder
    basePrice?: SortOrder
  }

  export type BuyerContractMaxOrderByAggregateInput = {
    id?: SortOrder
    buyerId?: SortOrder
    unitId?: SortOrder
    contractDate?: SortOrder
    basePrice?: SortOrder
    cpiBaseMonth?: SortOrder
    paymentTerms?: SortOrder
    status?: SortOrder
    versionLabel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuyerContractMinOrderByAggregateInput = {
    id?: SortOrder
    buyerId?: SortOrder
    unitId?: SortOrder
    contractDate?: SortOrder
    basePrice?: SortOrder
    cpiBaseMonth?: SortOrder
    paymentTerms?: SortOrder
    status?: SortOrder
    versionLabel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuyerContractSumOrderByAggregateInput = {
    id?: SortOrder
    buyerId?: SortOrder
    unitId?: SortOrder
    basePrice?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumContractStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[]
    notIn?: $Enums.ContractStatus[]
    not?: NestedEnumContractStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContractStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractStatusFilter<$PrismaModel>
    _max?: NestedEnumContractStatusFilter<$PrismaModel>
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type BuyerContractScalarRelationFilter = {
    is?: BuyerContractWhereInput
    isNot?: BuyerContractWhereInput
  }

  export type BuyerPaymentOrderByRelevanceInput = {
    fields: BuyerPaymentOrderByRelevanceFieldEnum | BuyerPaymentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BuyerPaymentCountOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    dueDate?: SortOrder
    paidDate?: SortOrder
    amountNominal?: SortOrder
    cpiFactor?: SortOrder
    amountIndexed?: SortOrder
    method?: SortOrder
    reference?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuyerPaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    amountNominal?: SortOrder
    cpiFactor?: SortOrder
    amountIndexed?: SortOrder
  }

  export type BuyerPaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    dueDate?: SortOrder
    paidDate?: SortOrder
    amountNominal?: SortOrder
    cpiFactor?: SortOrder
    amountIndexed?: SortOrder
    method?: SortOrder
    reference?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuyerPaymentMinOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    dueDate?: SortOrder
    paidDate?: SortOrder
    amountNominal?: SortOrder
    cpiFactor?: SortOrder
    amountIndexed?: SortOrder
    method?: SortOrder
    reference?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuyerPaymentSumOrderByAggregateInput = {
    id?: SortOrder
    contractId?: SortOrder
    amountNominal?: SortOrder
    cpiFactor?: SortOrder
    amountIndexed?: SortOrder
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type UnitCreateNestedManyWithoutProjectInput = {
    create?: XOR<UnitCreateWithoutProjectInput, UnitUncheckedCreateWithoutProjectInput> | UnitCreateWithoutProjectInput[] | UnitUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutProjectInput | UnitCreateOrConnectWithoutProjectInput[]
    createMany?: UnitCreateManyProjectInputEnvelope
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
  }

  export type UnitUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<UnitCreateWithoutProjectInput, UnitUncheckedCreateWithoutProjectInput> | UnitCreateWithoutProjectInput[] | UnitUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutProjectInput | UnitCreateOrConnectWithoutProjectInput[]
    createMany?: UnitCreateManyProjectInputEnvelope
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UnitUpdateManyWithoutProjectNestedInput = {
    create?: XOR<UnitCreateWithoutProjectInput, UnitUncheckedCreateWithoutProjectInput> | UnitCreateWithoutProjectInput[] | UnitUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutProjectInput | UnitCreateOrConnectWithoutProjectInput[]
    upsert?: UnitUpsertWithWhereUniqueWithoutProjectInput | UnitUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: UnitCreateManyProjectInputEnvelope
    set?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    disconnect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    delete?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    update?: UnitUpdateWithWhereUniqueWithoutProjectInput | UnitUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: UnitUpdateManyWithWhereWithoutProjectInput | UnitUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: UnitScalarWhereInput | UnitScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UnitUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<UnitCreateWithoutProjectInput, UnitUncheckedCreateWithoutProjectInput> | UnitCreateWithoutProjectInput[] | UnitUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutProjectInput | UnitCreateOrConnectWithoutProjectInput[]
    upsert?: UnitUpsertWithWhereUniqueWithoutProjectInput | UnitUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: UnitCreateManyProjectInputEnvelope
    set?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    disconnect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    delete?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    update?: UnitUpdateWithWhereUniqueWithoutProjectInput | UnitUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: UnitUpdateManyWithWhereWithoutProjectInput | UnitUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: UnitScalarWhereInput | UnitScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutUnitsInput = {
    create?: XOR<ProjectCreateWithoutUnitsInput, ProjectUncheckedCreateWithoutUnitsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUnitsInput
    connect?: ProjectWhereUniqueInput
  }

  export type BuyerContractCreateNestedManyWithoutUnitInput = {
    create?: XOR<BuyerContractCreateWithoutUnitInput, BuyerContractUncheckedCreateWithoutUnitInput> | BuyerContractCreateWithoutUnitInput[] | BuyerContractUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: BuyerContractCreateOrConnectWithoutUnitInput | BuyerContractCreateOrConnectWithoutUnitInput[]
    createMany?: BuyerContractCreateManyUnitInputEnvelope
    connect?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
  }

  export type BuyerContractUncheckedCreateNestedManyWithoutUnitInput = {
    create?: XOR<BuyerContractCreateWithoutUnitInput, BuyerContractUncheckedCreateWithoutUnitInput> | BuyerContractCreateWithoutUnitInput[] | BuyerContractUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: BuyerContractCreateOrConnectWithoutUnitInput | BuyerContractCreateOrConnectWithoutUnitInput[]
    createMany?: BuyerContractCreateManyUnitInputEnvelope
    connect?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumUnitStatusFieldUpdateOperationsInput = {
    set?: $Enums.UnitStatus
  }

  export type ProjectUpdateOneRequiredWithoutUnitsNestedInput = {
    create?: XOR<ProjectCreateWithoutUnitsInput, ProjectUncheckedCreateWithoutUnitsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUnitsInput
    upsert?: ProjectUpsertWithoutUnitsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutUnitsInput, ProjectUpdateWithoutUnitsInput>, ProjectUncheckedUpdateWithoutUnitsInput>
  }

  export type BuyerContractUpdateManyWithoutUnitNestedInput = {
    create?: XOR<BuyerContractCreateWithoutUnitInput, BuyerContractUncheckedCreateWithoutUnitInput> | BuyerContractCreateWithoutUnitInput[] | BuyerContractUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: BuyerContractCreateOrConnectWithoutUnitInput | BuyerContractCreateOrConnectWithoutUnitInput[]
    upsert?: BuyerContractUpsertWithWhereUniqueWithoutUnitInput | BuyerContractUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: BuyerContractCreateManyUnitInputEnvelope
    set?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    disconnect?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    delete?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    connect?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    update?: BuyerContractUpdateWithWhereUniqueWithoutUnitInput | BuyerContractUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: BuyerContractUpdateManyWithWhereWithoutUnitInput | BuyerContractUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: BuyerContractScalarWhereInput | BuyerContractScalarWhereInput[]
  }

  export type BuyerContractUncheckedUpdateManyWithoutUnitNestedInput = {
    create?: XOR<BuyerContractCreateWithoutUnitInput, BuyerContractUncheckedCreateWithoutUnitInput> | BuyerContractCreateWithoutUnitInput[] | BuyerContractUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: BuyerContractCreateOrConnectWithoutUnitInput | BuyerContractCreateOrConnectWithoutUnitInput[]
    upsert?: BuyerContractUpsertWithWhereUniqueWithoutUnitInput | BuyerContractUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: BuyerContractCreateManyUnitInputEnvelope
    set?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    disconnect?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    delete?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    connect?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    update?: BuyerContractUpdateWithWhereUniqueWithoutUnitInput | BuyerContractUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: BuyerContractUpdateManyWithWhereWithoutUnitInput | BuyerContractUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: BuyerContractScalarWhereInput | BuyerContractScalarWhereInput[]
  }

  export type BuyerContractCreateNestedManyWithoutBuyerInput = {
    create?: XOR<BuyerContractCreateWithoutBuyerInput, BuyerContractUncheckedCreateWithoutBuyerInput> | BuyerContractCreateWithoutBuyerInput[] | BuyerContractUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: BuyerContractCreateOrConnectWithoutBuyerInput | BuyerContractCreateOrConnectWithoutBuyerInput[]
    createMany?: BuyerContractCreateManyBuyerInputEnvelope
    connect?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
  }

  export type BuyerContractUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<BuyerContractCreateWithoutBuyerInput, BuyerContractUncheckedCreateWithoutBuyerInput> | BuyerContractCreateWithoutBuyerInput[] | BuyerContractUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: BuyerContractCreateOrConnectWithoutBuyerInput | BuyerContractCreateOrConnectWithoutBuyerInput[]
    createMany?: BuyerContractCreateManyBuyerInputEnvelope
    connect?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
  }

  export type BuyerContractUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<BuyerContractCreateWithoutBuyerInput, BuyerContractUncheckedCreateWithoutBuyerInput> | BuyerContractCreateWithoutBuyerInput[] | BuyerContractUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: BuyerContractCreateOrConnectWithoutBuyerInput | BuyerContractCreateOrConnectWithoutBuyerInput[]
    upsert?: BuyerContractUpsertWithWhereUniqueWithoutBuyerInput | BuyerContractUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: BuyerContractCreateManyBuyerInputEnvelope
    set?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    disconnect?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    delete?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    connect?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    update?: BuyerContractUpdateWithWhereUniqueWithoutBuyerInput | BuyerContractUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: BuyerContractUpdateManyWithWhereWithoutBuyerInput | BuyerContractUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: BuyerContractScalarWhereInput | BuyerContractScalarWhereInput[]
  }

  export type BuyerContractUncheckedUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<BuyerContractCreateWithoutBuyerInput, BuyerContractUncheckedCreateWithoutBuyerInput> | BuyerContractCreateWithoutBuyerInput[] | BuyerContractUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: BuyerContractCreateOrConnectWithoutBuyerInput | BuyerContractCreateOrConnectWithoutBuyerInput[]
    upsert?: BuyerContractUpsertWithWhereUniqueWithoutBuyerInput | BuyerContractUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: BuyerContractCreateManyBuyerInputEnvelope
    set?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    disconnect?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    delete?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    connect?: BuyerContractWhereUniqueInput | BuyerContractWhereUniqueInput[]
    update?: BuyerContractUpdateWithWhereUniqueWithoutBuyerInput | BuyerContractUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: BuyerContractUpdateManyWithWhereWithoutBuyerInput | BuyerContractUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: BuyerContractScalarWhereInput | BuyerContractScalarWhereInput[]
  }

  export type BuyerCreateNestedOneWithoutContractsInput = {
    create?: XOR<BuyerCreateWithoutContractsInput, BuyerUncheckedCreateWithoutContractsInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutContractsInput
    connect?: BuyerWhereUniqueInput
  }

  export type UnitCreateNestedOneWithoutContractsInput = {
    create?: XOR<UnitCreateWithoutContractsInput, UnitUncheckedCreateWithoutContractsInput>
    connectOrCreate?: UnitCreateOrConnectWithoutContractsInput
    connect?: UnitWhereUniqueInput
  }

  export type BuyerPaymentCreateNestedManyWithoutContractInput = {
    create?: XOR<BuyerPaymentCreateWithoutContractInput, BuyerPaymentUncheckedCreateWithoutContractInput> | BuyerPaymentCreateWithoutContractInput[] | BuyerPaymentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: BuyerPaymentCreateOrConnectWithoutContractInput | BuyerPaymentCreateOrConnectWithoutContractInput[]
    createMany?: BuyerPaymentCreateManyContractInputEnvelope
    connect?: BuyerPaymentWhereUniqueInput | BuyerPaymentWhereUniqueInput[]
  }

  export type BuyerPaymentUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<BuyerPaymentCreateWithoutContractInput, BuyerPaymentUncheckedCreateWithoutContractInput> | BuyerPaymentCreateWithoutContractInput[] | BuyerPaymentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: BuyerPaymentCreateOrConnectWithoutContractInput | BuyerPaymentCreateOrConnectWithoutContractInput[]
    createMany?: BuyerPaymentCreateManyContractInputEnvelope
    connect?: BuyerPaymentWhereUniqueInput | BuyerPaymentWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumContractStatusFieldUpdateOperationsInput = {
    set?: $Enums.ContractStatus
  }

  export type BuyerUpdateOneRequiredWithoutContractsNestedInput = {
    create?: XOR<BuyerCreateWithoutContractsInput, BuyerUncheckedCreateWithoutContractsInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutContractsInput
    upsert?: BuyerUpsertWithoutContractsInput
    connect?: BuyerWhereUniqueInput
    update?: XOR<XOR<BuyerUpdateToOneWithWhereWithoutContractsInput, BuyerUpdateWithoutContractsInput>, BuyerUncheckedUpdateWithoutContractsInput>
  }

  export type UnitUpdateOneRequiredWithoutContractsNestedInput = {
    create?: XOR<UnitCreateWithoutContractsInput, UnitUncheckedCreateWithoutContractsInput>
    connectOrCreate?: UnitCreateOrConnectWithoutContractsInput
    upsert?: UnitUpsertWithoutContractsInput
    connect?: UnitWhereUniqueInput
    update?: XOR<XOR<UnitUpdateToOneWithWhereWithoutContractsInput, UnitUpdateWithoutContractsInput>, UnitUncheckedUpdateWithoutContractsInput>
  }

  export type BuyerPaymentUpdateManyWithoutContractNestedInput = {
    create?: XOR<BuyerPaymentCreateWithoutContractInput, BuyerPaymentUncheckedCreateWithoutContractInput> | BuyerPaymentCreateWithoutContractInput[] | BuyerPaymentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: BuyerPaymentCreateOrConnectWithoutContractInput | BuyerPaymentCreateOrConnectWithoutContractInput[]
    upsert?: BuyerPaymentUpsertWithWhereUniqueWithoutContractInput | BuyerPaymentUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: BuyerPaymentCreateManyContractInputEnvelope
    set?: BuyerPaymentWhereUniqueInput | BuyerPaymentWhereUniqueInput[]
    disconnect?: BuyerPaymentWhereUniqueInput | BuyerPaymentWhereUniqueInput[]
    delete?: BuyerPaymentWhereUniqueInput | BuyerPaymentWhereUniqueInput[]
    connect?: BuyerPaymentWhereUniqueInput | BuyerPaymentWhereUniqueInput[]
    update?: BuyerPaymentUpdateWithWhereUniqueWithoutContractInput | BuyerPaymentUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: BuyerPaymentUpdateManyWithWhereWithoutContractInput | BuyerPaymentUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: BuyerPaymentScalarWhereInput | BuyerPaymentScalarWhereInput[]
  }

  export type BuyerPaymentUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<BuyerPaymentCreateWithoutContractInput, BuyerPaymentUncheckedCreateWithoutContractInput> | BuyerPaymentCreateWithoutContractInput[] | BuyerPaymentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: BuyerPaymentCreateOrConnectWithoutContractInput | BuyerPaymentCreateOrConnectWithoutContractInput[]
    upsert?: BuyerPaymentUpsertWithWhereUniqueWithoutContractInput | BuyerPaymentUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: BuyerPaymentCreateManyContractInputEnvelope
    set?: BuyerPaymentWhereUniqueInput | BuyerPaymentWhereUniqueInput[]
    disconnect?: BuyerPaymentWhereUniqueInput | BuyerPaymentWhereUniqueInput[]
    delete?: BuyerPaymentWhereUniqueInput | BuyerPaymentWhereUniqueInput[]
    connect?: BuyerPaymentWhereUniqueInput | BuyerPaymentWhereUniqueInput[]
    update?: BuyerPaymentUpdateWithWhereUniqueWithoutContractInput | BuyerPaymentUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: BuyerPaymentUpdateManyWithWhereWithoutContractInput | BuyerPaymentUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: BuyerPaymentScalarWhereInput | BuyerPaymentScalarWhereInput[]
  }

  export type BuyerContractCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<BuyerContractCreateWithoutPaymentsInput, BuyerContractUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: BuyerContractCreateOrConnectWithoutPaymentsInput
    connect?: BuyerContractWhereUniqueInput
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type BuyerContractUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<BuyerContractCreateWithoutPaymentsInput, BuyerContractUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: BuyerContractCreateOrConnectWithoutPaymentsInput
    upsert?: BuyerContractUpsertWithoutPaymentsInput
    connect?: BuyerContractWhereUniqueInput
    update?: XOR<XOR<BuyerContractUpdateToOneWithWhereWithoutPaymentsInput, BuyerContractUpdateWithoutPaymentsInput>, BuyerContractUncheckedUpdateWithoutPaymentsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumUnitStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UnitStatus | EnumUnitStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UnitStatus[]
    notIn?: $Enums.UnitStatus[]
    not?: NestedEnumUnitStatusFilter<$PrismaModel> | $Enums.UnitStatus
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumUnitStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UnitStatus | EnumUnitStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UnitStatus[]
    notIn?: $Enums.UnitStatus[]
    not?: NestedEnumUnitStatusWithAggregatesFilter<$PrismaModel> | $Enums.UnitStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUnitStatusFilter<$PrismaModel>
    _max?: NestedEnumUnitStatusFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumContractStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[]
    notIn?: $Enums.ContractStatus[]
    not?: NestedEnumContractStatusFilter<$PrismaModel> | $Enums.ContractStatus
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumContractStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[]
    notIn?: $Enums.ContractStatus[]
    not?: NestedEnumContractStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContractStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractStatusFilter<$PrismaModel>
    _max?: NestedEnumContractStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type UnitCreateWithoutProjectInput = {
    unitCode: string
    floor?: number | null
    rooms?: Decimal | DecimalJsLike | number | string | null
    areaSqm?: Decimal | DecimalJsLike | number | string | null
    priceList?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.UnitStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: BuyerContractCreateNestedManyWithoutUnitInput
  }

  export type UnitUncheckedCreateWithoutProjectInput = {
    id?: number
    unitCode: string
    floor?: number | null
    rooms?: Decimal | DecimalJsLike | number | string | null
    areaSqm?: Decimal | DecimalJsLike | number | string | null
    priceList?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.UnitStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: BuyerContractUncheckedCreateNestedManyWithoutUnitInput
  }

  export type UnitCreateOrConnectWithoutProjectInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutProjectInput, UnitUncheckedCreateWithoutProjectInput>
  }

  export type UnitCreateManyProjectInputEnvelope = {
    data: UnitCreateManyProjectInput | UnitCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type UnitUpsertWithWhereUniqueWithoutProjectInput = {
    where: UnitWhereUniqueInput
    update: XOR<UnitUpdateWithoutProjectInput, UnitUncheckedUpdateWithoutProjectInput>
    create: XOR<UnitCreateWithoutProjectInput, UnitUncheckedCreateWithoutProjectInput>
  }

  export type UnitUpdateWithWhereUniqueWithoutProjectInput = {
    where: UnitWhereUniqueInput
    data: XOR<UnitUpdateWithoutProjectInput, UnitUncheckedUpdateWithoutProjectInput>
  }

  export type UnitUpdateManyWithWhereWithoutProjectInput = {
    where: UnitScalarWhereInput
    data: XOR<UnitUpdateManyMutationInput, UnitUncheckedUpdateManyWithoutProjectInput>
  }

  export type UnitScalarWhereInput = {
    AND?: UnitScalarWhereInput | UnitScalarWhereInput[]
    OR?: UnitScalarWhereInput[]
    NOT?: UnitScalarWhereInput | UnitScalarWhereInput[]
    id?: IntFilter<"Unit"> | number
    projectId?: IntFilter<"Unit"> | number
    unitCode?: StringFilter<"Unit"> | string
    floor?: IntNullableFilter<"Unit"> | number | null
    rooms?: DecimalNullableFilter<"Unit"> | Decimal | DecimalJsLike | number | string | null
    areaSqm?: DecimalNullableFilter<"Unit"> | Decimal | DecimalJsLike | number | string | null
    priceList?: DecimalNullableFilter<"Unit"> | Decimal | DecimalJsLike | number | string | null
    status?: EnumUnitStatusFilter<"Unit"> | $Enums.UnitStatus
    createdAt?: DateTimeFilter<"Unit"> | Date | string
    updatedAt?: DateTimeFilter<"Unit"> | Date | string
  }

  export type ProjectCreateWithoutUnitsInput = {
    name: string
    address?: string | null
    startDate?: Date | string | null
    endDatePlanned?: Date | string | null
    endDateActual?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUncheckedCreateWithoutUnitsInput = {
    id?: number
    name: string
    address?: string | null
    startDate?: Date | string | null
    endDatePlanned?: Date | string | null
    endDateActual?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateOrConnectWithoutUnitsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutUnitsInput, ProjectUncheckedCreateWithoutUnitsInput>
  }

  export type BuyerContractCreateWithoutUnitInput = {
    contractDate: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    cpiBaseMonth: Date | string
    paymentTerms?: string | null
    status?: $Enums.ContractStatus
    versionLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer: BuyerCreateNestedOneWithoutContractsInput
    payments?: BuyerPaymentCreateNestedManyWithoutContractInput
  }

  export type BuyerContractUncheckedCreateWithoutUnitInput = {
    id?: number
    buyerId: number
    contractDate: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    cpiBaseMonth: Date | string
    paymentTerms?: string | null
    status?: $Enums.ContractStatus
    versionLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payments?: BuyerPaymentUncheckedCreateNestedManyWithoutContractInput
  }

  export type BuyerContractCreateOrConnectWithoutUnitInput = {
    where: BuyerContractWhereUniqueInput
    create: XOR<BuyerContractCreateWithoutUnitInput, BuyerContractUncheckedCreateWithoutUnitInput>
  }

  export type BuyerContractCreateManyUnitInputEnvelope = {
    data: BuyerContractCreateManyUnitInput | BuyerContractCreateManyUnitInput[]
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutUnitsInput = {
    update: XOR<ProjectUpdateWithoutUnitsInput, ProjectUncheckedUpdateWithoutUnitsInput>
    create: XOR<ProjectCreateWithoutUnitsInput, ProjectUncheckedCreateWithoutUnitsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutUnitsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutUnitsInput, ProjectUncheckedUpdateWithoutUnitsInput>
  }

  export type ProjectUpdateWithoutUnitsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDatePlanned?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDateActual?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateWithoutUnitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDatePlanned?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDateActual?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerContractUpsertWithWhereUniqueWithoutUnitInput = {
    where: BuyerContractWhereUniqueInput
    update: XOR<BuyerContractUpdateWithoutUnitInput, BuyerContractUncheckedUpdateWithoutUnitInput>
    create: XOR<BuyerContractCreateWithoutUnitInput, BuyerContractUncheckedCreateWithoutUnitInput>
  }

  export type BuyerContractUpdateWithWhereUniqueWithoutUnitInput = {
    where: BuyerContractWhereUniqueInput
    data: XOR<BuyerContractUpdateWithoutUnitInput, BuyerContractUncheckedUpdateWithoutUnitInput>
  }

  export type BuyerContractUpdateManyWithWhereWithoutUnitInput = {
    where: BuyerContractScalarWhereInput
    data: XOR<BuyerContractUpdateManyMutationInput, BuyerContractUncheckedUpdateManyWithoutUnitInput>
  }

  export type BuyerContractScalarWhereInput = {
    AND?: BuyerContractScalarWhereInput | BuyerContractScalarWhereInput[]
    OR?: BuyerContractScalarWhereInput[]
    NOT?: BuyerContractScalarWhereInput | BuyerContractScalarWhereInput[]
    id?: IntFilter<"BuyerContract"> | number
    buyerId?: IntFilter<"BuyerContract"> | number
    unitId?: IntFilter<"BuyerContract"> | number
    contractDate?: DateTimeFilter<"BuyerContract"> | Date | string
    basePrice?: DecimalFilter<"BuyerContract"> | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeFilter<"BuyerContract"> | Date | string
    paymentTerms?: StringNullableFilter<"BuyerContract"> | string | null
    status?: EnumContractStatusFilter<"BuyerContract"> | $Enums.ContractStatus
    versionLabel?: StringNullableFilter<"BuyerContract"> | string | null
    createdAt?: DateTimeFilter<"BuyerContract"> | Date | string
    updatedAt?: DateTimeFilter<"BuyerContract"> | Date | string
  }

  export type BuyerContractCreateWithoutBuyerInput = {
    contractDate: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    cpiBaseMonth: Date | string
    paymentTerms?: string | null
    status?: $Enums.ContractStatus
    versionLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    unit: UnitCreateNestedOneWithoutContractsInput
    payments?: BuyerPaymentCreateNestedManyWithoutContractInput
  }

  export type BuyerContractUncheckedCreateWithoutBuyerInput = {
    id?: number
    unitId: number
    contractDate: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    cpiBaseMonth: Date | string
    paymentTerms?: string | null
    status?: $Enums.ContractStatus
    versionLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payments?: BuyerPaymentUncheckedCreateNestedManyWithoutContractInput
  }

  export type BuyerContractCreateOrConnectWithoutBuyerInput = {
    where: BuyerContractWhereUniqueInput
    create: XOR<BuyerContractCreateWithoutBuyerInput, BuyerContractUncheckedCreateWithoutBuyerInput>
  }

  export type BuyerContractCreateManyBuyerInputEnvelope = {
    data: BuyerContractCreateManyBuyerInput | BuyerContractCreateManyBuyerInput[]
    skipDuplicates?: boolean
  }

  export type BuyerContractUpsertWithWhereUniqueWithoutBuyerInput = {
    where: BuyerContractWhereUniqueInput
    update: XOR<BuyerContractUpdateWithoutBuyerInput, BuyerContractUncheckedUpdateWithoutBuyerInput>
    create: XOR<BuyerContractCreateWithoutBuyerInput, BuyerContractUncheckedCreateWithoutBuyerInput>
  }

  export type BuyerContractUpdateWithWhereUniqueWithoutBuyerInput = {
    where: BuyerContractWhereUniqueInput
    data: XOR<BuyerContractUpdateWithoutBuyerInput, BuyerContractUncheckedUpdateWithoutBuyerInput>
  }

  export type BuyerContractUpdateManyWithWhereWithoutBuyerInput = {
    where: BuyerContractScalarWhereInput
    data: XOR<BuyerContractUpdateManyMutationInput, BuyerContractUncheckedUpdateManyWithoutBuyerInput>
  }

  export type BuyerCreateWithoutContractsInput = {
    name: string
    email?: string | null
    phone?: string | null
    idNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuyerUncheckedCreateWithoutContractsInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    idNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuyerCreateOrConnectWithoutContractsInput = {
    where: BuyerWhereUniqueInput
    create: XOR<BuyerCreateWithoutContractsInput, BuyerUncheckedCreateWithoutContractsInput>
  }

  export type UnitCreateWithoutContractsInput = {
    unitCode: string
    floor?: number | null
    rooms?: Decimal | DecimalJsLike | number | string | null
    areaSqm?: Decimal | DecimalJsLike | number | string | null
    priceList?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.UnitStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutUnitsInput
  }

  export type UnitUncheckedCreateWithoutContractsInput = {
    id?: number
    projectId: number
    unitCode: string
    floor?: number | null
    rooms?: Decimal | DecimalJsLike | number | string | null
    areaSqm?: Decimal | DecimalJsLike | number | string | null
    priceList?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.UnitStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UnitCreateOrConnectWithoutContractsInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutContractsInput, UnitUncheckedCreateWithoutContractsInput>
  }

  export type BuyerPaymentCreateWithoutContractInput = {
    dueDate: Date | string
    paidDate?: Date | string | null
    amountNominal: Decimal | DecimalJsLike | number | string
    cpiFactor?: Decimal | DecimalJsLike | number | string
    amountIndexed: Decimal | DecimalJsLike | number | string
    method?: $Enums.PaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuyerPaymentUncheckedCreateWithoutContractInput = {
    id?: number
    dueDate: Date | string
    paidDate?: Date | string | null
    amountNominal: Decimal | DecimalJsLike | number | string
    cpiFactor?: Decimal | DecimalJsLike | number | string
    amountIndexed: Decimal | DecimalJsLike | number | string
    method?: $Enums.PaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuyerPaymentCreateOrConnectWithoutContractInput = {
    where: BuyerPaymentWhereUniqueInput
    create: XOR<BuyerPaymentCreateWithoutContractInput, BuyerPaymentUncheckedCreateWithoutContractInput>
  }

  export type BuyerPaymentCreateManyContractInputEnvelope = {
    data: BuyerPaymentCreateManyContractInput | BuyerPaymentCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type BuyerUpsertWithoutContractsInput = {
    update: XOR<BuyerUpdateWithoutContractsInput, BuyerUncheckedUpdateWithoutContractsInput>
    create: XOR<BuyerCreateWithoutContractsInput, BuyerUncheckedCreateWithoutContractsInput>
    where?: BuyerWhereInput
  }

  export type BuyerUpdateToOneWithWhereWithoutContractsInput = {
    where?: BuyerWhereInput
    data: XOR<BuyerUpdateWithoutContractsInput, BuyerUncheckedUpdateWithoutContractsInput>
  }

  export type BuyerUpdateWithoutContractsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerUncheckedUpdateWithoutContractsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UnitUpsertWithoutContractsInput = {
    update: XOR<UnitUpdateWithoutContractsInput, UnitUncheckedUpdateWithoutContractsInput>
    create: XOR<UnitCreateWithoutContractsInput, UnitUncheckedCreateWithoutContractsInput>
    where?: UnitWhereInput
  }

  export type UnitUpdateToOneWithWhereWithoutContractsInput = {
    where?: UnitWhereInput
    data: XOR<UnitUpdateWithoutContractsInput, UnitUncheckedUpdateWithoutContractsInput>
  }

  export type UnitUpdateWithoutContractsInput = {
    unitCode?: StringFieldUpdateOperationsInput | string
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    rooms?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaSqm?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priceList?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumUnitStatusFieldUpdateOperationsInput | $Enums.UnitStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutUnitsNestedInput
  }

  export type UnitUncheckedUpdateWithoutContractsInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    unitCode?: StringFieldUpdateOperationsInput | string
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    rooms?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaSqm?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priceList?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumUnitStatusFieldUpdateOperationsInput | $Enums.UnitStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerPaymentUpsertWithWhereUniqueWithoutContractInput = {
    where: BuyerPaymentWhereUniqueInput
    update: XOR<BuyerPaymentUpdateWithoutContractInput, BuyerPaymentUncheckedUpdateWithoutContractInput>
    create: XOR<BuyerPaymentCreateWithoutContractInput, BuyerPaymentUncheckedCreateWithoutContractInput>
  }

  export type BuyerPaymentUpdateWithWhereUniqueWithoutContractInput = {
    where: BuyerPaymentWhereUniqueInput
    data: XOR<BuyerPaymentUpdateWithoutContractInput, BuyerPaymentUncheckedUpdateWithoutContractInput>
  }

  export type BuyerPaymentUpdateManyWithWhereWithoutContractInput = {
    where: BuyerPaymentScalarWhereInput
    data: XOR<BuyerPaymentUpdateManyMutationInput, BuyerPaymentUncheckedUpdateManyWithoutContractInput>
  }

  export type BuyerPaymentScalarWhereInput = {
    AND?: BuyerPaymentScalarWhereInput | BuyerPaymentScalarWhereInput[]
    OR?: BuyerPaymentScalarWhereInput[]
    NOT?: BuyerPaymentScalarWhereInput | BuyerPaymentScalarWhereInput[]
    id?: IntFilter<"BuyerPayment"> | number
    contractId?: IntFilter<"BuyerPayment"> | number
    dueDate?: DateTimeFilter<"BuyerPayment"> | Date | string
    paidDate?: DateTimeNullableFilter<"BuyerPayment"> | Date | string | null
    amountNominal?: DecimalFilter<"BuyerPayment"> | Decimal | DecimalJsLike | number | string
    cpiFactor?: DecimalFilter<"BuyerPayment"> | Decimal | DecimalJsLike | number | string
    amountIndexed?: DecimalFilter<"BuyerPayment"> | Decimal | DecimalJsLike | number | string
    method?: EnumPaymentMethodFilter<"BuyerPayment"> | $Enums.PaymentMethod
    reference?: StringNullableFilter<"BuyerPayment"> | string | null
    notes?: StringNullableFilter<"BuyerPayment"> | string | null
    createdAt?: DateTimeFilter<"BuyerPayment"> | Date | string
    updatedAt?: DateTimeFilter<"BuyerPayment"> | Date | string
  }

  export type BuyerContractCreateWithoutPaymentsInput = {
    contractDate: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    cpiBaseMonth: Date | string
    paymentTerms?: string | null
    status?: $Enums.ContractStatus
    versionLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer: BuyerCreateNestedOneWithoutContractsInput
    unit: UnitCreateNestedOneWithoutContractsInput
  }

  export type BuyerContractUncheckedCreateWithoutPaymentsInput = {
    id?: number
    buyerId: number
    unitId: number
    contractDate: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    cpiBaseMonth: Date | string
    paymentTerms?: string | null
    status?: $Enums.ContractStatus
    versionLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuyerContractCreateOrConnectWithoutPaymentsInput = {
    where: BuyerContractWhereUniqueInput
    create: XOR<BuyerContractCreateWithoutPaymentsInput, BuyerContractUncheckedCreateWithoutPaymentsInput>
  }

  export type BuyerContractUpsertWithoutPaymentsInput = {
    update: XOR<BuyerContractUpdateWithoutPaymentsInput, BuyerContractUncheckedUpdateWithoutPaymentsInput>
    create: XOR<BuyerContractCreateWithoutPaymentsInput, BuyerContractUncheckedCreateWithoutPaymentsInput>
    where?: BuyerContractWhereInput
  }

  export type BuyerContractUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: BuyerContractWhereInput
    data: XOR<BuyerContractUpdateWithoutPaymentsInput, BuyerContractUncheckedUpdateWithoutPaymentsInput>
  }

  export type BuyerContractUpdateWithoutPaymentsInput = {
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: BuyerUpdateOneRequiredWithoutContractsNestedInput
    unit?: UnitUpdateOneRequiredWithoutContractsNestedInput
  }

  export type BuyerContractUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyerId?: IntFieldUpdateOperationsInput | number
    unitId?: IntFieldUpdateOperationsInput | number
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UnitCreateManyProjectInput = {
    id?: number
    unitCode: string
    floor?: number | null
    rooms?: Decimal | DecimalJsLike | number | string | null
    areaSqm?: Decimal | DecimalJsLike | number | string | null
    priceList?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.UnitStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UnitUpdateWithoutProjectInput = {
    unitCode?: StringFieldUpdateOperationsInput | string
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    rooms?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaSqm?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priceList?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumUnitStatusFieldUpdateOperationsInput | $Enums.UnitStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: BuyerContractUpdateManyWithoutUnitNestedInput
  }

  export type UnitUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    unitCode?: StringFieldUpdateOperationsInput | string
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    rooms?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaSqm?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priceList?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumUnitStatusFieldUpdateOperationsInput | $Enums.UnitStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: BuyerContractUncheckedUpdateManyWithoutUnitNestedInput
  }

  export type UnitUncheckedUpdateManyWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    unitCode?: StringFieldUpdateOperationsInput | string
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    rooms?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaSqm?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priceList?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumUnitStatusFieldUpdateOperationsInput | $Enums.UnitStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerContractCreateManyUnitInput = {
    id?: number
    buyerId: number
    contractDate: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    cpiBaseMonth: Date | string
    paymentTerms?: string | null
    status?: $Enums.ContractStatus
    versionLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuyerContractUpdateWithoutUnitInput = {
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: BuyerUpdateOneRequiredWithoutContractsNestedInput
    payments?: BuyerPaymentUpdateManyWithoutContractNestedInput
  }

  export type BuyerContractUncheckedUpdateWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyerId?: IntFieldUpdateOperationsInput | number
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: BuyerPaymentUncheckedUpdateManyWithoutContractNestedInput
  }

  export type BuyerContractUncheckedUpdateManyWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyerId?: IntFieldUpdateOperationsInput | number
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerContractCreateManyBuyerInput = {
    id?: number
    unitId: number
    contractDate: Date | string
    basePrice: Decimal | DecimalJsLike | number | string
    cpiBaseMonth: Date | string
    paymentTerms?: string | null
    status?: $Enums.ContractStatus
    versionLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuyerContractUpdateWithoutBuyerInput = {
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unit?: UnitUpdateOneRequiredWithoutContractsNestedInput
    payments?: BuyerPaymentUpdateManyWithoutContractNestedInput
  }

  export type BuyerContractUncheckedUpdateWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    unitId?: IntFieldUpdateOperationsInput | number
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: BuyerPaymentUncheckedUpdateManyWithoutContractNestedInput
  }

  export type BuyerContractUncheckedUpdateManyWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    unitId?: IntFieldUpdateOperationsInput | number
    contractDate?: DateTimeFieldUpdateOperationsInput | Date | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiBaseMonth?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerPaymentCreateManyContractInput = {
    id?: number
    dueDate: Date | string
    paidDate?: Date | string | null
    amountNominal: Decimal | DecimalJsLike | number | string
    cpiFactor?: Decimal | DecimalJsLike | number | string
    amountIndexed: Decimal | DecimalJsLike | number | string
    method?: $Enums.PaymentMethod
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuyerPaymentUpdateWithoutContractInput = {
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountNominal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiFactor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amountIndexed?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerPaymentUncheckedUpdateWithoutContractInput = {
    id?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountNominal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiFactor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amountIndexed?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerPaymentUncheckedUpdateManyWithoutContractInput = {
    id?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountNominal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cpiFactor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amountIndexed?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}