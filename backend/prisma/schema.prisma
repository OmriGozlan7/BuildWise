// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Project {
  id             Int       @id @default(autoincrement())
  name           String
  address        String?
  startDate      DateTime?
  endDatePlanned DateTime?
  endDateActual  DateTime?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  units          Unit[]
}

model Unit {
  id        Int        @id @default(autoincrement())
  projectId Int
  unitCode  String
  floor     Int?
  rooms     Decimal?
  areaSqm   Decimal?
  priceList Decimal?
  status    UnitStatus @default(available)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  project   Project         @relation(fields: [projectId], references: [id])
  contracts BuyerContract[]

  @@unique([projectId, unitCode])
}

enum UnitStatus {
  available
  sold
  on_hold
}

model Buyer {
  id        Int             @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  idNumber  String?
  notes     String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  contracts BuyerContract[]
}

model BuyerContract {
  id           Int            @id @default(autoincrement())
  buyerId      Int
  unitId       Int
  contractDate DateTime
  basePrice    Decimal
  cpiBaseMonth DateTime // YYYY-MM-01
  paymentTerms String?
  status       ContractStatus @default(active)
  versionLabel String? // v1.0 וכד'
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  buyer    Buyer          @relation(fields: [buyerId], references: [id])
  unit     Unit           @relation(fields: [unitId], references: [id])
  payments BuyerPayment[]
}

enum ContractStatus {
  active
  cancelled
  completed
}

model BuyerPayment {
  id            Int           @id @default(autoincrement())
  contractId    Int
  dueDate       DateTime
  paidDate      DateTime?
  amountNominal Decimal
  cpiFactor     Decimal       @default(1.0)
  amountIndexed Decimal
  method        PaymentMethod @default(bank_transfer)
  reference     String?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  contract BuyerContract @relation(fields: [contractId], references: [id])

  @@index([contractId, dueDate])
  @@index([paidDate])
}

enum PaymentMethod {
  bank_transfer
  cheque
  cash
  other
}
